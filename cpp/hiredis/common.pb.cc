// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace commonproto {

namespace {

const ::google::protobuf::Descriptor* pb_level_id_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_level_id_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_server_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_server_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_player_base_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_player_base_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_level_state_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_level_state_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_level_state_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_level_state_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_mijing_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_mijing_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_mijing_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_mijing_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_hero_equip_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_hero_equip_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_hero_attr_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_hero_attr_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_hero_attr_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_hero_attr_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_skill_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_skill_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_skill_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_skill_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_hero_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_hero_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_hero_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_hero_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_queue_hero_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_queue_hero_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_battle_queue_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_battle_queue_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_battle_queue_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_battle_queue_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_attr_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_attr_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_attr_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_attr_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_item_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_item_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_level_prize_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_level_prize_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_item_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_item_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_level_prize_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_level_prize_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_monster_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_monster_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_monster_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_monster_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_rank50_self_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_rank50_self_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_task_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_task_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_task_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_task_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_event_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_event_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_event_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_event_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_event_idc_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_event_idc_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_event_idc_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_event_idc_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_event_op_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_event_op_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_event_op_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_event_op_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_money_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_money_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_attachment_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_attachment_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_mail_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_mail_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_mail_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_mail_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_challenge_player_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_challenge_player_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_challenge_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_challenge_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_exped_opponent_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_exped_opponent_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_exped_opponent_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_exped_opponent_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_arena_history_entry_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_arena_history_entry_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_exped_history_entry_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_exped_history_entry_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_exped_survive_hero_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_exped_survive_hero_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_exped_survive_hero_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_exped_survive_hero_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_rank_player_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_rank_player_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_rank_player_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_rank_player_list_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_enemies_rank_list_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_enemies_rank_list_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_server_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_server_state_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_money_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_unlock_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_novice_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_open_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_level_star_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_level_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_queue_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_event_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_hero_attr_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_skill_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_lottery_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_saodang_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_midas_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pb_stamina_task_type_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  pb_level_id_t_descriptor_ = file->message_type(0);
  static const int pb_level_id_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_id_t, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_id_t, section_id_),
  };
  pb_level_id_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_level_id_t_descriptor_,
      pb_level_id_t::default_instance_,
      pb_level_id_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_id_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_id_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_level_id_t));
  pb_server_info_t_descriptor_ = file->message_type(1);
  static const int pb_server_info_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_server_info_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_server_info_t, svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_server_info_t, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_server_info_t, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_server_info_t, total_user_num_),
  };
  pb_server_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_server_info_t_descriptor_,
      pb_server_info_t::default_instance_,
      pb_server_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_server_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_server_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_server_info_t));
  pb_player_base_info_t_descriptor_ = file->message_type(2);
  static const int pb_player_base_info_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_player_base_info_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_player_base_info_t, nick_),
  };
  pb_player_base_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_player_base_info_t_descriptor_,
      pb_player_base_info_t::default_instance_,
      pb_player_base_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_player_base_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_player_base_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_player_base_info_t));
  pb_level_state_t_descriptor_ = file->message_type(3);
  static const int pb_level_state_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_t, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_t, section_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_t, level_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_t, daily_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_t, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_t, daily_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_t, reset_count_),
  };
  pb_level_state_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_level_state_t_descriptor_,
      pb_level_state_t::default_instance_,
      pb_level_state_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_level_state_t));
  pb_level_state_list_t_descriptor_ = file->message_type(4);
  static const int pb_level_state_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_list_t, level_states_),
  };
  pb_level_state_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_level_state_list_t_descriptor_,
      pb_level_state_list_t::default_instance_,
      pb_level_state_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_state_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_level_state_list_t));
  pb_mijing_t_descriptor_ = file->message_type(5);
  static const int pb_mijing_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mijing_t, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mijing_t, daily_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mijing_t, daily_date_),
  };
  pb_mijing_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_mijing_t_descriptor_,
      pb_mijing_t::default_instance_,
      pb_mijing_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mijing_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mijing_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_mijing_t));
  pb_mijing_list_t_descriptor_ = file->message_type(6);
  static const int pb_mijing_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mijing_list_t, mijing_),
  };
  pb_mijing_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_mijing_list_t_descriptor_,
      pb_mijing_list_t::default_instance_,
      pb_mijing_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mijing_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mijing_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_mijing_list_t));
  pb_hero_equip_t_descriptor_ = file->message_type(7);
  static const int pb_hero_equip_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_equip_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_equip_t, exp_),
  };
  pb_hero_equip_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_hero_equip_t_descriptor_,
      pb_hero_equip_t::default_instance_,
      pb_hero_equip_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_equip_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_equip_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_hero_equip_t));
  pb_hero_attr_t_descriptor_ = file->message_type(8);
  static const int pb_hero_attr_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_attr_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_attr_t, value_),
  };
  pb_hero_attr_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_hero_attr_t_descriptor_,
      pb_hero_attr_t::default_instance_,
      pb_hero_attr_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_attr_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_attr_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_hero_attr_t));
  pb_hero_attr_list_t_descriptor_ = file->message_type(9);
  static const int pb_hero_attr_list_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_attr_list_t, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_attr_list_t, hero_attrs_),
  };
  pb_hero_attr_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_hero_attr_list_t_descriptor_,
      pb_hero_attr_list_t::default_instance_,
      pb_hero_attr_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_attr_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_attr_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_hero_attr_list_t));
  pb_skill_t_descriptor_ = file->message_type(10);
  static const int pb_skill_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_skill_t, skill_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_skill_t, skill_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_skill_t, skill_index_),
  };
  pb_skill_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_skill_t_descriptor_,
      pb_skill_t::default_instance_,
      pb_skill_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_skill_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_skill_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_skill_t));
  pb_skill_list_t_descriptor_ = file->message_type(11);
  static const int pb_skill_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_skill_list_t, skills_),
  };
  pb_skill_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_skill_list_t_descriptor_,
      pb_skill_list_t::default_instance_,
      pb_skill_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_skill_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_skill_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_skill_list_t));
  pb_hero_t_descriptor_ = file->message_type(12);
  static const int pb_hero_t_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_t, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_t, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_t, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_t, star_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_t, hero_equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_t, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_t, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_t, hp_),
  };
  pb_hero_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_hero_t_descriptor_,
      pb_hero_t::default_instance_,
      pb_hero_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_hero_t));
  pb_hero_list_t_descriptor_ = file->message_type(13);
  static const int pb_hero_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_list_t, heros_),
  };
  pb_hero_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_hero_list_t_descriptor_,
      pb_hero_list_t::default_instance_,
      pb_hero_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_hero_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_hero_list_t));
  pb_queue_hero_t_descriptor_ = file->message_type(14);
  static const int pb_queue_hero_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_queue_hero_t, hero_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_queue_hero_t, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_queue_hero_t, star_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_queue_hero_t, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_queue_hero_t, btl_val_),
  };
  pb_queue_hero_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_queue_hero_t_descriptor_,
      pb_queue_hero_t::default_instance_,
      pb_queue_hero_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_queue_hero_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_queue_hero_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_queue_hero_t));
  pb_battle_queue_t_descriptor_ = file->message_type(15);
  static const int pb_battle_queue_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_battle_queue_t, queue_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_battle_queue_t, queue_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_battle_queue_t, total_btl_val_),
  };
  pb_battle_queue_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_battle_queue_t_descriptor_,
      pb_battle_queue_t::default_instance_,
      pb_battle_queue_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_battle_queue_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_battle_queue_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_battle_queue_t));
  pb_battle_queue_list_t_descriptor_ = file->message_type(16);
  static const int pb_battle_queue_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_battle_queue_list_t, battle_queues_),
  };
  pb_battle_queue_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_battle_queue_list_t_descriptor_,
      pb_battle_queue_list_t::default_instance_,
      pb_battle_queue_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_battle_queue_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_battle_queue_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_battle_queue_list_t));
  pb_attr_t_descriptor_ = file->message_type(17);
  static const int pb_attr_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_attr_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_attr_t, value_),
  };
  pb_attr_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_attr_t_descriptor_,
      pb_attr_t::default_instance_,
      pb_attr_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_attr_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_attr_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_attr_t));
  pb_attr_list_t_descriptor_ = file->message_type(18);
  static const int pb_attr_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_attr_list_t, attrs_),
  };
  pb_attr_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_attr_list_t_descriptor_,
      pb_attr_list_t::default_instance_,
      pb_attr_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_attr_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_attr_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_attr_list_t));
  pb_item_t_descriptor_ = file->message_type(19);
  static const int pb_item_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_item_t, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_item_t, count_),
  };
  pb_item_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_item_t_descriptor_,
      pb_item_t::default_instance_,
      pb_item_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_item_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_item_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_item_t));
  pb_level_prize_t_descriptor_ = file->message_type(20);
  static const int pb_level_prize_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_prize_t, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_prize_t, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_prize_t, hero_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_prize_t, player_exp_),
  };
  pb_level_prize_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_level_prize_t_descriptor_,
      pb_level_prize_t::default_instance_,
      pb_level_prize_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_prize_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_prize_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_level_prize_t));
  pb_item_list_t_descriptor_ = file->message_type(21);
  static const int pb_item_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_item_list_t, items_),
  };
  pb_item_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_item_list_t_descriptor_,
      pb_item_list_t::default_instance_,
      pb_item_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_item_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_item_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_item_list_t));
  pb_level_prize_list_t_descriptor_ = file->message_type(22);
  static const int pb_level_prize_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_prize_list_t, level_prizes_),
  };
  pb_level_prize_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_level_prize_list_t_descriptor_,
      pb_level_prize_list_t::default_instance_,
      pb_level_prize_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_prize_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_level_prize_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_level_prize_list_t));
  pb_monster_t_descriptor_ = file->message_type(23);
  static const int pb_monster_t_offsets_[1] = {
  };
  pb_monster_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_monster_t_descriptor_,
      pb_monster_t::default_instance_,
      pb_monster_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_monster_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_monster_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_monster_t));
  pb_monster_list_t_descriptor_ = file->message_type(24);
  static const int pb_monster_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_monster_list_t, monsters_),
  };
  pb_monster_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_monster_list_t_descriptor_,
      pb_monster_list_t::default_instance_,
      pb_monster_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_monster_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_monster_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_monster_list_t));
  pb_rank50_self_t_descriptor_ = file->message_type(25);
  static const int pb_rank50_self_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank50_self_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank50_self_t, self_rank_),
  };
  pb_rank50_self_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_rank50_self_t_descriptor_,
      pb_rank50_self_t::default_instance_,
      pb_rank50_self_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank50_self_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank50_self_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_rank50_self_t));
  pb_task_t_descriptor_ = file->message_type(26);
  static const int pb_task_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_task_t, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_task_t, task_last_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_task_t, bonus_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_task_t, count_),
  };
  pb_task_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_task_t_descriptor_,
      pb_task_t::default_instance_,
      pb_task_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_task_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_task_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_task_t));
  pb_task_list_t_descriptor_ = file->message_type(27);
  static const int pb_task_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_task_list_t, tasks_),
  };
  pb_task_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_task_list_t_descriptor_,
      pb_task_list_t::default_instance_,
      pb_task_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_task_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_task_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_task_list_t));
  pb_event_t_descriptor_ = file->message_type(28);
  static const int pb_event_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_t, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_t, event_last_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_t, bonus_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_t, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_t, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_t, op_val_list_),
  };
  pb_event_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_event_t_descriptor_,
      pb_event_t::default_instance_,
      pb_event_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_event_t));
  pb_event_list_t_descriptor_ = file->message_type(29);
  static const int pb_event_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_list_t, events_),
  };
  pb_event_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_event_list_t_descriptor_,
      pb_event_list_t::default_instance_,
      pb_event_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_event_list_t));
  pb_event_idc_t_descriptor_ = file->message_type(30);
  static const int pb_event_idc_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_idc_t, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_idc_t, count_),
  };
  pb_event_idc_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_event_idc_t_descriptor_,
      pb_event_idc_t::default_instance_,
      pb_event_idc_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_idc_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_idc_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_event_idc_t));
  pb_event_idc_list_t_descriptor_ = file->message_type(31);
  static const int pb_event_idc_list_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_idc_list_t, ev_idcs_bouns_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_idc_list_t, ev_idcs_done_),
  };
  pb_event_idc_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_event_idc_list_t_descriptor_,
      pb_event_idc_list_t::default_instance_,
      pb_event_idc_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_idc_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_idc_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_event_idc_list_t));
  pb_event_op_t_descriptor_ = file->message_type(32);
  static const int pb_event_op_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_op_t, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_op_t, val_),
  };
  pb_event_op_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_event_op_t_descriptor_,
      pb_event_op_t::default_instance_,
      pb_event_op_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_op_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_op_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_event_op_t));
  pb_event_op_list_t_descriptor_ = file->message_type(33);
  static const int pb_event_op_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_op_list_t, event_op_),
  };
  pb_event_op_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_event_op_list_t_descriptor_,
      pb_event_op_list_t::default_instance_,
      pb_event_op_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_op_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_event_op_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_event_op_list_t));
  pb_money_t_descriptor_ = file->message_type(34);
  static const int pb_money_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_money_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_money_t, count_),
  };
  pb_money_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_money_t_descriptor_,
      pb_money_t::default_instance_,
      pb_money_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_money_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_money_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_money_t));
  pb_attachment_t_descriptor_ = file->message_type(35);
  static const int pb_attachment_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_attachment_t, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_attachment_t, moneys_),
  };
  pb_attachment_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_attachment_t_descriptor_,
      pb_attachment_t::default_instance_,
      pb_attachment_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_attachment_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_attachment_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_attachment_t));
  pb_mail_t_descriptor_ = file->message_type(36);
  static const int pb_mail_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_t, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_t, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_t, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_t, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_t, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_t, read_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_t, attachment_),
  };
  pb_mail_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_mail_t_descriptor_,
      pb_mail_t::default_instance_,
      pb_mail_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_mail_t));
  pb_mail_list_t_descriptor_ = file->message_type(37);
  static const int pb_mail_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_list_t, mails_),
  };
  pb_mail_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_mail_list_t_descriptor_,
      pb_mail_list_t::default_instance_,
      pb_mail_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_mail_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_mail_list_t));
  pb_challenge_player_t_descriptor_ = file->message_type(38);
  static const int pb_challenge_player_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_player_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_player_t, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_player_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_player_t, btl_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_player_t, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_player_t, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_player_t, chal_hero_),
  };
  pb_challenge_player_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_challenge_player_t_descriptor_,
      pb_challenge_player_t::default_instance_,
      pb_challenge_player_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_player_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_player_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_challenge_player_t));
  pb_challenge_list_t_descriptor_ = file->message_type(39);
  static const int pb_challenge_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_list_t, challenge_player_),
  };
  pb_challenge_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_challenge_list_t_descriptor_,
      pb_challenge_list_t::default_instance_,
      pb_challenge_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_challenge_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_challenge_list_t));
  pb_exped_opponent_t_descriptor_ = file->message_type(40);
  static const int pb_exped_opponent_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_opponent_t, chl_player_),
  };
  pb_exped_opponent_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_exped_opponent_t_descriptor_,
      pb_exped_opponent_t::default_instance_,
      pb_exped_opponent_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_opponent_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_opponent_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_exped_opponent_t));
  pb_exped_opponent_list_t_descriptor_ = file->message_type(41);
  static const int pb_exped_opponent_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_opponent_list_t, exped_opponents_),
  };
  pb_exped_opponent_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_exped_opponent_list_t_descriptor_,
      pb_exped_opponent_list_t::default_instance_,
      pb_exped_opponent_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_opponent_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_opponent_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_exped_opponent_list_t));
  pb_arena_history_entry_t_descriptor_ = file->message_type(42);
  static const int pb_arena_history_entry_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_arena_history_entry_t, challenge_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_arena_history_entry_t, b_success_),
  };
  pb_arena_history_entry_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_arena_history_entry_t_descriptor_,
      pb_arena_history_entry_t::default_instance_,
      pb_arena_history_entry_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_arena_history_entry_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_arena_history_entry_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_arena_history_entry_t));
  pb_exped_history_entry_t_descriptor_ = file->message_type(43);
  static const int pb_exped_history_entry_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_history_entry_t, oppon_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_history_entry_t, oppon_nick_),
  };
  pb_exped_history_entry_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_exped_history_entry_t_descriptor_,
      pb_exped_history_entry_t::default_instance_,
      pb_exped_history_entry_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_history_entry_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_history_entry_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_exped_history_entry_t));
  pb_exped_survive_hero_t_descriptor_ = file->message_type(44);
  static const int pb_exped_survive_hero_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_survive_hero_t, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_survive_hero_t, hero_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_survive_hero_t, hero_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_survive_hero_t, b_dead_),
  };
  pb_exped_survive_hero_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_exped_survive_hero_t_descriptor_,
      pb_exped_survive_hero_t::default_instance_,
      pb_exped_survive_hero_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_survive_hero_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_survive_hero_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_exped_survive_hero_t));
  pb_exped_survive_hero_list_t_descriptor_ = file->message_type(45);
  static const int pb_exped_survive_hero_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_survive_hero_list_t, survive_hero_),
  };
  pb_exped_survive_hero_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_exped_survive_hero_list_t_descriptor_,
      pb_exped_survive_hero_list_t::default_instance_,
      pb_exped_survive_hero_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_survive_hero_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_exped_survive_hero_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_exped_survive_hero_list_t));
  pb_rank_player_t_descriptor_ = file->message_type(46);
  static const int pb_rank_player_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_t, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_t, total_stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_t, union_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_t, top4_btl_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_t, total_btl_val_),
  };
  pb_rank_player_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_rank_player_t_descriptor_,
      pb_rank_player_t::default_instance_,
      pb_rank_player_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_rank_player_t));
  pb_rank_player_list_t_descriptor_ = file->message_type(47);
  static const int pb_rank_player_list_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_list_t, rank_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_list_t, self_rank_),
  };
  pb_rank_player_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_rank_player_list_t_descriptor_,
      pb_rank_player_list_t::default_instance_,
      pb_rank_player_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_rank_player_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_rank_player_list_t));
  pb_enemies_rank_list_t_descriptor_ = file->message_type(48);
  static const int pb_enemies_rank_list_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_enemies_rank_list_t, enemies_ranks_),
  };
  pb_enemies_rank_list_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_enemies_rank_list_t_descriptor_,
      pb_enemies_rank_list_t::default_instance_,
      pb_enemies_rank_list_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_enemies_rank_list_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_enemies_rank_list_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_enemies_rank_list_t));
  pb_server_type_t_descriptor_ = file->enum_type(0);
  pb_server_state_t_descriptor_ = file->enum_type(1);
  pb_money_type_t_descriptor_ = file->enum_type(2);
  pb_unlock_type_t_descriptor_ = file->enum_type(3);
  pb_novice_type_t_descriptor_ = file->enum_type(4);
  pb_open_type_t_descriptor_ = file->enum_type(5);
  pb_level_star_t_descriptor_ = file->enum_type(6);
  pb_level_type_t_descriptor_ = file->enum_type(7);
  pb_queue_type_t_descriptor_ = file->enum_type(8);
  pb_event_type_t_descriptor_ = file->enum_type(9);
  pb_hero_attr_type_t_descriptor_ = file->enum_type(10);
  pb_skill_type_t_descriptor_ = file->enum_type(11);
  pb_lottery_type_t_descriptor_ = file->enum_type(12);
  pb_saodang_type_t_descriptor_ = file->enum_type(13);
  pb_midas_type_t_descriptor_ = file->enum_type(14);
  pb_stamina_task_type_t_descriptor_ = file->enum_type(15);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_level_id_t_descriptor_, &pb_level_id_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_server_info_t_descriptor_, &pb_server_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_player_base_info_t_descriptor_, &pb_player_base_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_level_state_t_descriptor_, &pb_level_state_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_level_state_list_t_descriptor_, &pb_level_state_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_mijing_t_descriptor_, &pb_mijing_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_mijing_list_t_descriptor_, &pb_mijing_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_hero_equip_t_descriptor_, &pb_hero_equip_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_hero_attr_t_descriptor_, &pb_hero_attr_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_hero_attr_list_t_descriptor_, &pb_hero_attr_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_skill_t_descriptor_, &pb_skill_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_skill_list_t_descriptor_, &pb_skill_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_hero_t_descriptor_, &pb_hero_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_hero_list_t_descriptor_, &pb_hero_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_queue_hero_t_descriptor_, &pb_queue_hero_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_battle_queue_t_descriptor_, &pb_battle_queue_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_battle_queue_list_t_descriptor_, &pb_battle_queue_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_attr_t_descriptor_, &pb_attr_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_attr_list_t_descriptor_, &pb_attr_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_item_t_descriptor_, &pb_item_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_level_prize_t_descriptor_, &pb_level_prize_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_item_list_t_descriptor_, &pb_item_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_level_prize_list_t_descriptor_, &pb_level_prize_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_monster_t_descriptor_, &pb_monster_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_monster_list_t_descriptor_, &pb_monster_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_rank50_self_t_descriptor_, &pb_rank50_self_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_task_t_descriptor_, &pb_task_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_task_list_t_descriptor_, &pb_task_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_event_t_descriptor_, &pb_event_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_event_list_t_descriptor_, &pb_event_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_event_idc_t_descriptor_, &pb_event_idc_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_event_idc_list_t_descriptor_, &pb_event_idc_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_event_op_t_descriptor_, &pb_event_op_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_event_op_list_t_descriptor_, &pb_event_op_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_money_t_descriptor_, &pb_money_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_attachment_t_descriptor_, &pb_attachment_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_mail_t_descriptor_, &pb_mail_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_mail_list_t_descriptor_, &pb_mail_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_challenge_player_t_descriptor_, &pb_challenge_player_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_challenge_list_t_descriptor_, &pb_challenge_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_exped_opponent_t_descriptor_, &pb_exped_opponent_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_exped_opponent_list_t_descriptor_, &pb_exped_opponent_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_arena_history_entry_t_descriptor_, &pb_arena_history_entry_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_exped_history_entry_t_descriptor_, &pb_exped_history_entry_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_exped_survive_hero_t_descriptor_, &pb_exped_survive_hero_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_exped_survive_hero_list_t_descriptor_, &pb_exped_survive_hero_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_rank_player_t_descriptor_, &pb_rank_player_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_rank_player_list_t_descriptor_, &pb_rank_player_list_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_enemies_rank_list_t_descriptor_, &pb_enemies_rank_list_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete pb_level_id_t::default_instance_;
  delete pb_level_id_t_reflection_;
  delete pb_server_info_t::default_instance_;
  delete pb_server_info_t_reflection_;
  delete pb_player_base_info_t::default_instance_;
  delete pb_player_base_info_t_reflection_;
  delete pb_level_state_t::default_instance_;
  delete pb_level_state_t_reflection_;
  delete pb_level_state_list_t::default_instance_;
  delete pb_level_state_list_t_reflection_;
  delete pb_mijing_t::default_instance_;
  delete pb_mijing_t_reflection_;
  delete pb_mijing_list_t::default_instance_;
  delete pb_mijing_list_t_reflection_;
  delete pb_hero_equip_t::default_instance_;
  delete pb_hero_equip_t_reflection_;
  delete pb_hero_attr_t::default_instance_;
  delete pb_hero_attr_t_reflection_;
  delete pb_hero_attr_list_t::default_instance_;
  delete pb_hero_attr_list_t_reflection_;
  delete pb_skill_t::default_instance_;
  delete pb_skill_t_reflection_;
  delete pb_skill_list_t::default_instance_;
  delete pb_skill_list_t_reflection_;
  delete pb_hero_t::default_instance_;
  delete pb_hero_t_reflection_;
  delete pb_hero_list_t::default_instance_;
  delete pb_hero_list_t_reflection_;
  delete pb_queue_hero_t::default_instance_;
  delete pb_queue_hero_t_reflection_;
  delete pb_battle_queue_t::default_instance_;
  delete pb_battle_queue_t_reflection_;
  delete pb_battle_queue_list_t::default_instance_;
  delete pb_battle_queue_list_t_reflection_;
  delete pb_attr_t::default_instance_;
  delete pb_attr_t_reflection_;
  delete pb_attr_list_t::default_instance_;
  delete pb_attr_list_t_reflection_;
  delete pb_item_t::default_instance_;
  delete pb_item_t_reflection_;
  delete pb_level_prize_t::default_instance_;
  delete pb_level_prize_t_reflection_;
  delete pb_item_list_t::default_instance_;
  delete pb_item_list_t_reflection_;
  delete pb_level_prize_list_t::default_instance_;
  delete pb_level_prize_list_t_reflection_;
  delete pb_monster_t::default_instance_;
  delete pb_monster_t_reflection_;
  delete pb_monster_list_t::default_instance_;
  delete pb_monster_list_t_reflection_;
  delete pb_rank50_self_t::default_instance_;
  delete pb_rank50_self_t_reflection_;
  delete pb_task_t::default_instance_;
  delete pb_task_t_reflection_;
  delete pb_task_list_t::default_instance_;
  delete pb_task_list_t_reflection_;
  delete pb_event_t::default_instance_;
  delete pb_event_t_reflection_;
  delete pb_event_list_t::default_instance_;
  delete pb_event_list_t_reflection_;
  delete pb_event_idc_t::default_instance_;
  delete pb_event_idc_t_reflection_;
  delete pb_event_idc_list_t::default_instance_;
  delete pb_event_idc_list_t_reflection_;
  delete pb_event_op_t::default_instance_;
  delete pb_event_op_t_reflection_;
  delete pb_event_op_list_t::default_instance_;
  delete pb_event_op_list_t_reflection_;
  delete pb_money_t::default_instance_;
  delete pb_money_t_reflection_;
  delete pb_attachment_t::default_instance_;
  delete pb_attachment_t_reflection_;
  delete pb_mail_t::default_instance_;
  delete pb_mail_t_reflection_;
  delete pb_mail_list_t::default_instance_;
  delete pb_mail_list_t_reflection_;
  delete pb_challenge_player_t::default_instance_;
  delete pb_challenge_player_t_reflection_;
  delete pb_challenge_list_t::default_instance_;
  delete pb_challenge_list_t_reflection_;
  delete pb_exped_opponent_t::default_instance_;
  delete pb_exped_opponent_t_reflection_;
  delete pb_exped_opponent_list_t::default_instance_;
  delete pb_exped_opponent_list_t_reflection_;
  delete pb_arena_history_entry_t::default_instance_;
  delete pb_arena_history_entry_t_reflection_;
  delete pb_exped_history_entry_t::default_instance_;
  delete pb_exped_history_entry_t_reflection_;
  delete pb_exped_survive_hero_t::default_instance_;
  delete pb_exped_survive_hero_t_reflection_;
  delete pb_exped_survive_hero_list_t::default_instance_;
  delete pb_exped_survive_hero_list_t_reflection_;
  delete pb_rank_player_t::default_instance_;
  delete pb_rank_player_t_reflection_;
  delete pb_rank_player_list_t::default_instance_;
  delete pb_rank_player_list_t_reflection_;
  delete pb_enemies_rank_list_t::default_instance_;
  delete pb_enemies_rank_list_t_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\013commonproto\"7\n\rpb_level_"
    "id_t\022\022\n\nchapter_id\030\001 \002(\r\022\022\n\nsection_id\030\002"
    " \002(\r\"\201\001\n\020pb_server_info_t\022+\n\004type\030\001 \002(\0162"
    "\035.commonproto.pb_server_type_t\022\016\n\006svr_id"
    "\030\002 \002(\r\022\n\n\002ip\030\003 \002(\r\022\014\n\004port\030\004 \002(\r\022\026\n\016tota"
    "l_user_num\030\005 \001(\r\"2\n\025pb_player_base_info_"
    "t\022\013\n\003uid\030\001 \002(\r\022\014\n\004nick\030\002 \001(\t\"\312\001\n\020pb_leve"
    "l_state_t\022\022\n\nchapter_id\030\002 \002(\r\022\022\n\nsection"
    "_id\030\003 \002(\r\022A\n\nlevel_star\030\004 \002(\0162\034.commonpr"
    "oto.pb_level_star_t:\017LEVEL_STAR_NONE\022\023\n\013"
    "daily_count\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\022\022\n\ndail"
    "y_date\030\007 \001(\r\022\023\n\013reset_count\030\010 \001(\r\"L\n\025pb_"
    "level_state_list_t\0223\n\014level_states\030\001 \003(\013"
    "2\035.commonproto.pb_level_state_t\"J\n\013pb_mi"
    "jing_t\022\022\n\nchapter_id\030\001 \002(\r\022\023\n\013daily_coun"
    "t\030\003 \001(\r\022\022\n\ndaily_date\030\005 \001(\r\"<\n\020pb_mijing"
    "_list_t\022(\n\006mijing\030\001 \003(\0132\030.commonproto.pb"
    "_mijing_t\"0\n\017pb_hero_equip_t\022\r\n\002lv\030\001 \002(\r"
    ":\0011\022\016\n\003exp\030\002 \002(\r:\0010\"O\n\016pb_hero_attr_t\022.\n"
    "\004type\030\001 \002(\0162 .commonproto.pb_hero_attr_t"
    "ype_t\022\r\n\005value\030\002 \002(\r\"W\n\023pb_hero_attr_lis"
    "t_t\022\017\n\007hero_id\030\001 \002(\r\022/\n\nhero_attrs\030\002 \003(\013"
    "2\033.commonproto.pb_hero_attr_t\"g\n\npb_skil"
    "l_t\022\020\n\010skill_lv\030\001 \002(\r\022\024\n\014skill_rating\030\002 "
    "\002(\r\0221\n\013skill_index\030\003 \002(\0162\034.commonproto.p"
    "b_skill_type_t\":\n\017pb_skill_list_t\022\'\n\006ski"
    "lls\030\001 \003(\0132\027.commonproto.pb_skill_t\"\316\001\n\tp"
    "b_hero_t\022\017\n\007hero_id\030\001 \002(\r\022\n\n\002lv\030\002 \002(\r\022\013\n"
    "\003exp\030\003 \002(\r\022\016\n\006rating\030\004 \002(\r\022\023\n\013star_ratin"
    "g\030\005 \002(\r\0221\n\013hero_equips\030\006 \003(\0132\034.commonpro"
    "to.pb_hero_equip_t\022\'\n\006skills\030\t \003(\0132\027.com"
    "monproto.pb_skill_t\022\n\n\002cd\030\n \001(\r\022\n\n\002hp\030\013 "
    "\001(\r\"7\n\016pb_hero_list_t\022%\n\005heros\030\001 \003(\0132\026.c"
    "ommonproto.pb_hero_t\"j\n\017pb_queue_hero_t\022"
    "\020\n\010hero_pos\030\001 \002(\r\022\017\n\007hero_id\030\002 \002(\r\022\023\n\013st"
    "ar_rating\030\003 \001(\r\022\016\n\006rating\030\004 \001(\r\022\017\n\007btl_v"
    "al\030\005 \001(\r\"\216\001\n\021pb_battle_queue_t\0220\n\nqueue_"
    "hero\030\001 \003(\0132\034.commonproto.pb_queue_hero_t"
    "\0220\n\nqueue_type\030\002 \002(\0162\034.commonproto.pb_qu"
    "eue_type_t\022\025\n\rtotal_btl_val\030\003 \001(\r\"O\n\026pb_"
    "battle_queue_list_t\0225\n\rbattle_queues\030\001 \002"
    "(\0132\036.commonproto.pb_battle_queue_t\"(\n\tpb"
    "_attr_t\022\014\n\004type\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\"7\n\016"
    "pb_attr_list_t\022%\n\005attrs\030\001 \003(\0132\026.commonpr"
    "oto.pb_attr_t\"+\n\tpb_item_t\022\017\n\007item_id\030\001 "
    "\002(\r\022\r\n\005count\030\002 \002(\r\"v\n\020pb_level_prize_t\022\014"
    "\n\004gold\030\001 \002(\r\022.\n\titem_list\030\002 \002(\0132\033.common"
    "proto.pb_item_list_t\022\020\n\010hero_exp\030\003 \002(\r\022\022"
    "\n\nplayer_exp\030\004 \002(\r\"7\n\016pb_item_list_t\022%\n\005"
    "items\030\001 \003(\0132\026.commonproto.pb_item_t\"L\n\025p"
    "b_level_prize_list_t\0223\n\014level_prizes\030\001 \003"
    "(\0132\035.commonproto.pb_level_prize_t\"\016\n\014pb_"
    "monster_t\"@\n\021pb_monster_list_t\022+\n\010monste"
    "rs\030\001 \003(\0132\031.commonproto.pb_monster_t\"2\n\020p"
    "b_rank50_self_t\022\013\n\003uid\030\001 \003(\r\022\021\n\tself_ran"
    "k\030\002 \002(\r\"Y\n\tpb_task_t\022\017\n\007task_id\030\001 \002(\r\022\026\n"
    "\016task_last_date\030\002 \001(\r\022\024\n\014bonus_accept\030\003 "
    "\001(\r\022\r\n\005count\030\004 \001(\r\"7\n\016pb_task_list_t\022%\n\005"
    "tasks\030\001 \003(\0132\026.commonproto.pb_task_t\"\314\001\n\n"
    "pb_event_t\022\020\n\010event_id\030\001 \002(\r\022*\n\004type\030\002 \002"
    "(\0162\034.commonproto.pb_event_type_t\022\027\n\017even"
    "t_last_date\030\003 \002(\r\022\024\n\014bonus_accept\030\004 \002(\r\022"
    "\r\n\005count\030\005 \002(\r\022\014\n\004done\030\006 \002(\r\0224\n\013op_val_l"
    "ist\030\007 \001(\0132\037.commonproto.pb_event_op_list"
    "_t\":\n\017pb_event_list_t\022\'\n\006events\030\001 \003(\0132\027."
    "commonproto.pb_event_t\"1\n\016pb_event_idc_t"
    "\022\020\n\010event_id\030\001 \002(\r\022\r\n\005count\030\002 \001(\r\"\203\001\n\023pb"
    "_event_idc_list_t\0229\n\024ev_idcs_bouns_accep"
    "t\030\001 \003(\0132\033.commonproto.pb_event_idc_t\0221\n\014"
    "ev_idcs_done\030\002 \003(\0132\033.commonproto.pb_even"
    "t_idc_t\"-\n\rpb_event_op_t\022\017\n\007hero_id\030\001 \002("
    "\r\022\013\n\003val\030\002 \002(\r\"B\n\022pb_event_op_list_t\022,\n\010"
    "event_op\030\001 \003(\0132\032.commonproto.pb_event_op"
    "_t\"G\n\npb_money_t\022*\n\004type\030\001 \002(\0162\034.commonp"
    "roto.pb_money_type_t\022\r\n\005count\030\002 \002(\r\"j\n\017p"
    "b_attachment_t\022.\n\titem_list\030\001 \001(\0132\033.comm"
    "onproto.pb_item_list_t\022\'\n\006moneys\030\002 \003(\0132\027"
    ".commonproto.pb_money_t\"\244\001\n\tpb_mail_t\022\017\n"
    "\007mail_id\030\001 \002(\r\022\r\n\005title\030\002 \002(\t\022\016\n\006sender\030"
    "\003 \002(\t\022\017\n\007content\030\004 \002(\t\022\021\n\ttimestamp\030\005 \002("
    "\r\022\021\n\tread_mark\030\006 \002(\r\0220\n\nattachment\030\007 \001(\013"
    "2\034.commonproto.pb_attachment_t\"7\n\016pb_mai"
    "l_list_t\022%\n\005mails\030\001 \003(\0132\026.commonproto.pb"
    "_mail_t\"\233\001\n\025pb_challenge_player_t\022\013\n\003uid"
    "\030\001 \002(\r\022\014\n\004nick\030\002 \002(\t\022\n\n\002lv\030\003 \002(\r\022\017\n\007btl_"
    "val\030\004 \002(\r\022\021\n\twin_count\030\005 \002(\r\022\014\n\004rank\030\006 \002"
    "(\r\022)\n\tchal_hero\030\007 \003(\0132\026.commonproto.pb_h"
    "ero_t\"S\n\023pb_challenge_list_t\022<\n\020challeng"
    "e_player\030\001 \003(\0132\".commonproto.pb_challeng"
    "e_player_t\"M\n\023pb_exped_opponent_t\0226\n\nchl"
    "_player\030\001 \002(\0132\".commonproto.pb_challenge"
    "_player_t\"U\n\030pb_exped_opponent_list_t\0229\n"
    "\017exped_opponents\030\001 \003(\0132 .commonproto.pb_"
    "exped_opponent_t\"k\n\030pb_arena_history_ent"
    "ry_t\022<\n\020challenge_player\030\001 \002(\0132\".commonp"
    "roto.pb_challenge_player_t\022\021\n\tb_success\030"
    "\002 \002(\010\"A\n\030pb_exped_history_entry_t\022\021\n\topp"
    "on_uid\030\001 \002(\r\022\022\n\noppon_nick\030\002 \002(\t\"\\\n\027pb_e"
    "xped_survive_hero_t\022\017\n\007hero_id\030\001 \002(\r\022\017\n\007"
    "hero_hp\030\002 \002(\r\022\017\n\007hero_cd\030\003 \002(\r\022\016\n\006b_dead"
    "\030\004 \002(\010\"Z\n\034pb_exped_survive_hero_list_t\022:"
    "\n\014survive_hero\030\001 \003(\0132$.commonproto.pb_ex"
    "ped_survive_hero_t\"\203\001\n\020pb_rank_player_t\022"
    "\014\n\004nick\030\001 \002(\t\022\023\n\013total_stars\030\002 \001(\r\022\022\n\nun"
    "ion_name\030\003 \001(\t\022\013\n\003uid\030\004 \001(\r\022\024\n\014top4_btl_"
    "val\030\005 \001(\r\022\025\n\rtotal_btl_val\030\006 \001(\r\"_\n\025pb_r"
    "ank_player_list_t\0223\n\014rank_players\030\001 \003(\0132"
    "\035.commonproto.pb_rank_player_t\022\021\n\tself_r"
    "ank\030\002 \001(\r\"/\n\026pb_enemies_rank_list_t\022\025\n\re"
    "nemies_ranks\030\001 \003(\r*n\n\020pb_server_type_t\022\023"
    "\n\017SERVER_TYPE_ALL\020\000\022\026\n\022SERVER_TYPE_ONLIN"
    "E\020\001\022\025\n\021SERVER_TYPE_LOGIN\020\002\022\026\n\022SERVER_TYP"
    "E_SWITCH\020\003*4\n\021pb_server_state_t\022\n\n\006SMOOT"
    "H\020\001\022\t\n\005CROWD\020\002\022\010\n\004FULL\020\003*E\n\017pb_money_typ"
    "e_t\022\021\n\rDIAMOND_MONEY\020\001\022\016\n\nGOLD_MONEY\020\002\022\017"
    "\n\013ARENA_MONEY\020\003*\214\004\n\020pb_unlock_type_t\022\020\n\014"
    "EXPED_UNLOCK\020\001\022\017\n\013SHOP_UNLOCK\020\002\022\020\n\014ARENA"
    "_UNLOCK\020\003\022\020\n\014ELITE_UNLOCK\020\004\022\032\n\026EQUIP_MIJ"
    "ING_L1_UNLOCK\020\005\022\032\n\026EQUIP_MIJING_L2_UNLOC"
    "K\020\006\022\032\n\026EQUIP_MIJING_L3_UNLOCK\020\007\022\032\n\026EQUIP"
    "_MIJING_L4_UNLOCK\020\010\022\032\n\026EQUIP_MIJING_L5_U"
    "NLOCK\020\t\022\032\n\026EQUIP_MIJING_L6_UNLOCK\020\n\022\030\n\024E"
    "XP_MIJING_L1_UNLOCK\020\013\022\030\n\024EXP_MIJING_L2_U"
    "NLOCK\020\014\022\030\n\024EXP_MIJING_L3_UNLOCK\020\r\022\030\n\024EXP"
    "_MIJING_L4_UNLOCK\020\016\022\030\n\024EXP_MIJING_L5_UNL"
    "OCK\020\017\022\030\n\024EXP_MIJING_L6_UNLOCK\020\020\022\037\n\033VIP_T"
    "REASURE_VISABLE_UNLOCK\020\021\022\037\n\033VIP_TREASURE"
    "_USEABLE_UNLOCK\020\022\022\027\n\023TASK_USEABLE_UNLOCK"
    "\020\024\022\022\n\016SAODANG_UNLOCK\020\025*\231\003\n\020pb_novice_typ"
    "e_t\022\024\n\020NOV_LOTTERY_GOLD\020\001\022\027\n\023NOV_LOTTERY"
    "_DIAMOND\020\002\022\020\n\014NOV_TUTORIAL\020\003\022\033\n\027NOV_LOTT"
    "ERY_GOLD_SECOND\020\004\022\023\n\017NOV_FIRST_BLOOD\020\005\022\023"
    "\n\017NOV_HERO_SUMMON\020\006\022\021\n\rNOV_EQUIP_ARM\020\007\022\r"
    "\n\tNOV_ARENA\020\010\022\r\n\tNOV_EXPED\020\t\022\016\n\nNOV_MIJI"
    "NG\020\n\022\r\n\tNOV_ELITE\020\013\022\033\n\027NOV_STAR_RATING_U"
    "PGRADE\020\014\022\026\n\022NOV_RATING_UPGRADE\020\r\022\023\n\017NOV_"
    "USE_EXPITEM\020\016\022\024\n\020NOV_BATTLE_QUEUE\020\017\022\022\n\016N"
    "OV_DAILY_TASK\020\020\022\022\n\016NOV_MAIN_EVENT\020\021\022\r\n\tN"
    "OV_DEATH\020\022\022\026\n\022NOV_SKILL_RATINGUP\020\023*\"\n\016pb"
    "_open_type_t\022\020\n\014EXPED_O_TYPE\020\001*d\n\017pb_lev"
    "el_star_t\022\023\n\017LEVEL_STAR_NONE\020\000\022\022\n\016LEVEL_"
    "STAR_ONE\020\001\022\022\n\016LEVEL_STAR_TWO\020\002\022\024\n\020LEVEL_"
    "STAR_THREE\020\003*V\n\017pb_level_type_t\022\017\n\013LEVEL"
    "_STORY\020\000\022\017\n\013LEVEL_ARENA\020\024\022\017\n\013LEVEL_ELITE"
    "\020\036\022\020\n\014LEVEL_MIJING\020(*\344\001\n\017pb_queue_type_t"
    "\022\017\n\013QUEUE_STORY\020\000\022\017\n\013QUEUE_ELITE\020\n\022\023\n\017QU"
    "EUE_ARENA_DEF\020\024\022\023\n\017QUEUE_ARENA_ATK\020\036\022\026\n\022"
    "QUEUE_MIJING_MONEY\020(\022\024\n\020QUEUE_MIJING_EXP"
    "\0202\022\026\n\022QUEUE_MIJING_ITEM1\020<\022\026\n\022QUEUE_MIJI"
    "NG_ITEM2\020F\022\026\n\022QUEUE_MIJING_ITEM3\020Z\022\017\n\013QU"
    "EUE_EXPED\020d*\307\t\n\017pb_event_type_t\022\024\n\020e_ev_"
    "t_player_lv\020\001\022\022\n\016e_ev_t_hero_lv\020\002\022\027\n\023e_e"
    "v_t_hero_num4_lv\020\003\022\027\n\023e_ev_t_hero_num8_l"
    "v\020\004\022\030\n\024e_ev_t_hero_num12_lv\020\005\022\030\n\024e_ev_t_"
    "hero_num16_lv\020\006\022\030\n\024e_ev_t_hero_num20_lv\020"
    "\007\022\030\n\024e_ev_t_hero_num25_lv\020\010\022\030\n\024e_ev_t_he"
    "ro_num30_lv\020\t\022 \n\034e_ev_t_hero_green_ratin"
    "g_num\020\n\022\033\n\027e_ev_t_hero_num4_rating\020\013\022\033\n\027"
    "e_ev_t_hero_num8_rating\020\014\022\034\n\030e_ev_t_hero"
    "_num12_rating\020\r\022\034\n\030e_ev_t_hero_num20_rat"
    "ing\020\016\022\034\n\030e_ev_t_hero_num30_rating\020\017\022\023\n\017e"
    "_ev_t_hero_num\020\020\022\033\n\027e_ev_t_hero_star_rat"
    "ing\020\021\022 \n\034e_ev_t_hero_num4_star_rating\020\022\022"
    "!\n\035e_ev_t_hero_num12_star_rating\020\023\022!\n\035e_"
    "ev_t_hero_num20_star_rating\020\024\022!\n\035e_ev_t_"
    "hero_num30_star_rating\020\025\022\020\n\014e_ev_t_level"
    "\020\026\022\020\n\014e_ev_t_elite\020\027\022\026\n\022e_ev_t_level_aga"
    "in\020\030\022\026\n\022e_ev_t_elite_again\020\031\022\027\n\023e_ev_t_f"
    "irst_charge\020\032\022\035\n\031e_ev_t_first_hero_rank_"
    "up\020\033\022\030\n\024e_ev_t_player_lv_new\020\034\022\037\n\033e_ev_t"
    "_hero_summon_gaoqiang\020\035\022\037\n\033e_ev_t_hero_s"
    "ummon_lishuang\020\036\022\035\n\031e_ev_t_hero_summon_s"
    "anyan\020\037\022!\n\035e_ev_t_hero_green1_rating_num"
    "\020 \022\037\n\033e_ev_t_hero_blue_rating_num\020!\022 \n\034e"
    "_ev_t_hero_blue1_rating_num\020\"\022 \n\034e_ev_t_"
    "hero_blue2_rating_num\020#\022!\n\035e_ev_t_hero_p"
    "urple_rating_num\020$\022\"\n\036e_ev_t_hero_purple"
    "1_rating_num\020%\022\"\n\036e_ev_t_hero_purple2_ra"
    "ting_num\020&\022\"\n\036e_ev_t_hero_purple3_rating"
    "_num\020\'\022\"\n\036e_ev_t_hero_purple4_rating_num"
    "\020(\022!\n\035e_ev_t_hero_orange_rating_num\020)*\267\002"
    "\n\023pb_hero_attr_type_t\022\013\n\007HERO_LV\020\001\022\014\n\010HE"
    "RO_EXP\020\002\022\030\n\024HERO_SKILL_ACTIVE_LV\020\003\022\034\n\030HE"
    "RO_SKILL_ACTIVE_RATING\020\004\022\031\n\025HERO_SKILL_P"
    "ASSIVE_LV\020\005\022\035\n\031HERO_SKILL_PASSIVE_RATING"
    "\020\006\022\030\n\024HERO_SKILL_FRIEND_LV\020\007\022\034\n\030HERO_SKI"
    "LL_FRIEND_RATING\020\010\022\027\n\023HERO_SKILL_COMBO_L"
    "V\020\t\022\033\n\027HERO_SKILL_COMBO_RATING\020\n\022\017\n\013HERO"
    "_RATING\020\013\022\024\n\020HERO_STAR_RATING\020\014*Y\n\017pb_sk"
    "ill_type_t\022\020\n\014SKILL_ACTIVE\020\001\022\020\n\014SKILL_FR"
    "IEND\020\002\022\017\n\013SKILL_COMBO\020\003\022\021\n\rSKILL_PASSIVE"
    "\020\004*\255\001\n\021pb_lottery_type_t\022\022\n\016LOTTERY_GOLD"
    "_1\020\001\022\023\n\017LOTTERY_GOLD_10\020\002\022\025\n\021LOTTERY_DIA"
    "MOND_1\020\003\022\026\n\022LOTTERY_DIAMOND_10\020\004\022\025\n\021LOTT"
    "ERY_GOLD_FREE\020\005\022\030\n\024LOTTERY_DIAMOND_FREE\020"
    "\006\022\017\n\013LOTTERY_VIP\020\007*\213\001\n\021pb_saodang_type_t"
    "\022\r\n\tSAODANG_1\020\001\022\016\n\nSAODANG_10\020\002\022\017\n\013SAODA"
    "NG_ALL\020\003\022\025\n\021SAODANG_DIAMOND_1\020\004\022\026\n\022SAODA"
    "NG_DIAMOND_10\020\005\022\027\n\023SAODANG_DIAMOND_ALL\020\006"
    "*2\n\017pb_midas_type_t\022\016\n\nMIDAS_ONCE\020\001\022\017\n\013M"
    "IDAS_COMBO\020\002*C\n\026pb_stamina_task_type_t\022\t"
    "\n\005LUNCH\020\001\022\n\n\006DINNER\020\002\022\022\n\016MIDNIGHT_SNACK\020"
    "\003", 8081);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  pb_level_id_t::default_instance_ = new pb_level_id_t();
  pb_server_info_t::default_instance_ = new pb_server_info_t();
  pb_player_base_info_t::default_instance_ = new pb_player_base_info_t();
  pb_level_state_t::default_instance_ = new pb_level_state_t();
  pb_level_state_list_t::default_instance_ = new pb_level_state_list_t();
  pb_mijing_t::default_instance_ = new pb_mijing_t();
  pb_mijing_list_t::default_instance_ = new pb_mijing_list_t();
  pb_hero_equip_t::default_instance_ = new pb_hero_equip_t();
  pb_hero_attr_t::default_instance_ = new pb_hero_attr_t();
  pb_hero_attr_list_t::default_instance_ = new pb_hero_attr_list_t();
  pb_skill_t::default_instance_ = new pb_skill_t();
  pb_skill_list_t::default_instance_ = new pb_skill_list_t();
  pb_hero_t::default_instance_ = new pb_hero_t();
  pb_hero_list_t::default_instance_ = new pb_hero_list_t();
  pb_queue_hero_t::default_instance_ = new pb_queue_hero_t();
  pb_battle_queue_t::default_instance_ = new pb_battle_queue_t();
  pb_battle_queue_list_t::default_instance_ = new pb_battle_queue_list_t();
  pb_attr_t::default_instance_ = new pb_attr_t();
  pb_attr_list_t::default_instance_ = new pb_attr_list_t();
  pb_item_t::default_instance_ = new pb_item_t();
  pb_level_prize_t::default_instance_ = new pb_level_prize_t();
  pb_item_list_t::default_instance_ = new pb_item_list_t();
  pb_level_prize_list_t::default_instance_ = new pb_level_prize_list_t();
  pb_monster_t::default_instance_ = new pb_monster_t();
  pb_monster_list_t::default_instance_ = new pb_monster_list_t();
  pb_rank50_self_t::default_instance_ = new pb_rank50_self_t();
  pb_task_t::default_instance_ = new pb_task_t();
  pb_task_list_t::default_instance_ = new pb_task_list_t();
  pb_event_t::default_instance_ = new pb_event_t();
  pb_event_list_t::default_instance_ = new pb_event_list_t();
  pb_event_idc_t::default_instance_ = new pb_event_idc_t();
  pb_event_idc_list_t::default_instance_ = new pb_event_idc_list_t();
  pb_event_op_t::default_instance_ = new pb_event_op_t();
  pb_event_op_list_t::default_instance_ = new pb_event_op_list_t();
  pb_money_t::default_instance_ = new pb_money_t();
  pb_attachment_t::default_instance_ = new pb_attachment_t();
  pb_mail_t::default_instance_ = new pb_mail_t();
  pb_mail_list_t::default_instance_ = new pb_mail_list_t();
  pb_challenge_player_t::default_instance_ = new pb_challenge_player_t();
  pb_challenge_list_t::default_instance_ = new pb_challenge_list_t();
  pb_exped_opponent_t::default_instance_ = new pb_exped_opponent_t();
  pb_exped_opponent_list_t::default_instance_ = new pb_exped_opponent_list_t();
  pb_arena_history_entry_t::default_instance_ = new pb_arena_history_entry_t();
  pb_exped_history_entry_t::default_instance_ = new pb_exped_history_entry_t();
  pb_exped_survive_hero_t::default_instance_ = new pb_exped_survive_hero_t();
  pb_exped_survive_hero_list_t::default_instance_ = new pb_exped_survive_hero_list_t();
  pb_rank_player_t::default_instance_ = new pb_rank_player_t();
  pb_rank_player_list_t::default_instance_ = new pb_rank_player_list_t();
  pb_enemies_rank_list_t::default_instance_ = new pb_enemies_rank_list_t();
  pb_level_id_t::default_instance_->InitAsDefaultInstance();
  pb_server_info_t::default_instance_->InitAsDefaultInstance();
  pb_player_base_info_t::default_instance_->InitAsDefaultInstance();
  pb_level_state_t::default_instance_->InitAsDefaultInstance();
  pb_level_state_list_t::default_instance_->InitAsDefaultInstance();
  pb_mijing_t::default_instance_->InitAsDefaultInstance();
  pb_mijing_list_t::default_instance_->InitAsDefaultInstance();
  pb_hero_equip_t::default_instance_->InitAsDefaultInstance();
  pb_hero_attr_t::default_instance_->InitAsDefaultInstance();
  pb_hero_attr_list_t::default_instance_->InitAsDefaultInstance();
  pb_skill_t::default_instance_->InitAsDefaultInstance();
  pb_skill_list_t::default_instance_->InitAsDefaultInstance();
  pb_hero_t::default_instance_->InitAsDefaultInstance();
  pb_hero_list_t::default_instance_->InitAsDefaultInstance();
  pb_queue_hero_t::default_instance_->InitAsDefaultInstance();
  pb_battle_queue_t::default_instance_->InitAsDefaultInstance();
  pb_battle_queue_list_t::default_instance_->InitAsDefaultInstance();
  pb_attr_t::default_instance_->InitAsDefaultInstance();
  pb_attr_list_t::default_instance_->InitAsDefaultInstance();
  pb_item_t::default_instance_->InitAsDefaultInstance();
  pb_level_prize_t::default_instance_->InitAsDefaultInstance();
  pb_item_list_t::default_instance_->InitAsDefaultInstance();
  pb_level_prize_list_t::default_instance_->InitAsDefaultInstance();
  pb_monster_t::default_instance_->InitAsDefaultInstance();
  pb_monster_list_t::default_instance_->InitAsDefaultInstance();
  pb_rank50_self_t::default_instance_->InitAsDefaultInstance();
  pb_task_t::default_instance_->InitAsDefaultInstance();
  pb_task_list_t::default_instance_->InitAsDefaultInstance();
  pb_event_t::default_instance_->InitAsDefaultInstance();
  pb_event_list_t::default_instance_->InitAsDefaultInstance();
  pb_event_idc_t::default_instance_->InitAsDefaultInstance();
  pb_event_idc_list_t::default_instance_->InitAsDefaultInstance();
  pb_event_op_t::default_instance_->InitAsDefaultInstance();
  pb_event_op_list_t::default_instance_->InitAsDefaultInstance();
  pb_money_t::default_instance_->InitAsDefaultInstance();
  pb_attachment_t::default_instance_->InitAsDefaultInstance();
  pb_mail_t::default_instance_->InitAsDefaultInstance();
  pb_mail_list_t::default_instance_->InitAsDefaultInstance();
  pb_challenge_player_t::default_instance_->InitAsDefaultInstance();
  pb_challenge_list_t::default_instance_->InitAsDefaultInstance();
  pb_exped_opponent_t::default_instance_->InitAsDefaultInstance();
  pb_exped_opponent_list_t::default_instance_->InitAsDefaultInstance();
  pb_arena_history_entry_t::default_instance_->InitAsDefaultInstance();
  pb_exped_history_entry_t::default_instance_->InitAsDefaultInstance();
  pb_exped_survive_hero_t::default_instance_->InitAsDefaultInstance();
  pb_exped_survive_hero_list_t::default_instance_->InitAsDefaultInstance();
  pb_rank_player_t::default_instance_->InitAsDefaultInstance();
  pb_rank_player_list_t::default_instance_->InitAsDefaultInstance();
  pb_enemies_rank_list_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* pb_server_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_server_type_t_descriptor_;
}
bool pb_server_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_server_state_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_server_state_t_descriptor_;
}
bool pb_server_state_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_money_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_money_type_t_descriptor_;
}
bool pb_money_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_unlock_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_unlock_type_t_descriptor_;
}
bool pb_unlock_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_novice_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_novice_type_t_descriptor_;
}
bool pb_novice_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_open_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_open_type_t_descriptor_;
}
bool pb_open_type_t_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_level_star_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_level_star_t_descriptor_;
}
bool pb_level_star_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_level_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_level_type_t_descriptor_;
}
bool pb_level_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 20:
    case 30:
    case 40:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_queue_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_queue_type_t_descriptor_;
}
bool pb_queue_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 20:
    case 30:
    case 40:
    case 50:
    case 60:
    case 70:
    case 90:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_event_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_event_type_t_descriptor_;
}
bool pb_event_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_hero_attr_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_hero_attr_type_t_descriptor_;
}
bool pb_hero_attr_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_skill_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_skill_type_t_descriptor_;
}
bool pb_skill_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_lottery_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_lottery_type_t_descriptor_;
}
bool pb_lottery_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_saodang_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_saodang_type_t_descriptor_;
}
bool pb_saodang_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_midas_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_midas_type_t_descriptor_;
}
bool pb_midas_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pb_stamina_task_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_stamina_task_type_t_descriptor_;
}
bool pb_stamina_task_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int pb_level_id_t::kChapterIdFieldNumber;
const int pb_level_id_t::kSectionIdFieldNumber;
#endif  // !_MSC_VER

pb_level_id_t::pb_level_id_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_level_id_t::InitAsDefaultInstance() {
}

pb_level_id_t::pb_level_id_t(const pb_level_id_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_level_id_t::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0u;
  section_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_level_id_t::~pb_level_id_t() {
  SharedDtor();
}

void pb_level_id_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_level_id_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_level_id_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_level_id_t_descriptor_;
}

const pb_level_id_t& pb_level_id_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_level_id_t* pb_level_id_t::default_instance_ = NULL;

pb_level_id_t* pb_level_id_t::New() const {
  return new pb_level_id_t;
}

void pb_level_id_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0u;
    section_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_level_id_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_section_id;
        break;
      }

      // required uint32 section_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_id_)));
          set_has_section_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_level_id_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapter_id(), output);
  }

  // required uint32 section_id = 2;
  if (has_section_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->section_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_level_id_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapter_id(), target);
  }

  // required uint32 section_id = 2;
  if (has_section_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->section_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_level_id_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // required uint32 section_id = 2;
    if (has_section_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_level_id_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_level_id_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_level_id_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_level_id_t::MergeFrom(const pb_level_id_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_section_id()) {
      set_section_id(from.section_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_level_id_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_level_id_t::CopyFrom(const pb_level_id_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_level_id_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pb_level_id_t::Swap(pb_level_id_t* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(section_id_, other->section_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_level_id_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_level_id_t_descriptor_;
  metadata.reflection = pb_level_id_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_server_info_t::kTypeFieldNumber;
const int pb_server_info_t::kSvrIdFieldNumber;
const int pb_server_info_t::kIpFieldNumber;
const int pb_server_info_t::kPortFieldNumber;
const int pb_server_info_t::kTotalUserNumFieldNumber;
#endif  // !_MSC_VER

pb_server_info_t::pb_server_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_server_info_t::InitAsDefaultInstance() {
}

pb_server_info_t::pb_server_info_t(const pb_server_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_server_info_t::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  svr_id_ = 0u;
  ip_ = 0u;
  port_ = 0u;
  total_user_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_server_info_t::~pb_server_info_t() {
  SharedDtor();
}

void pb_server_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_server_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_server_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_server_info_t_descriptor_;
}

const pb_server_info_t& pb_server_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_server_info_t* pb_server_info_t::default_instance_ = NULL;

pb_server_info_t* pb_server_info_t::New() const {
  return new pb_server_info_t;
}

void pb_server_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    svr_id_ = 0u;
    ip_ = 0u;
    port_ = 0u;
    total_user_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_server_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .commonproto.pb_server_type_t type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonproto::pb_server_type_t_IsValid(value)) {
            set_type(static_cast< ::commonproto::pb_server_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svr_id;
        break;
      }

      // required uint32 svr_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_id_)));
          set_has_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ip;
        break;
      }

      // required uint32 ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_user_num;
        break;
      }

      // optional uint32 total_user_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_user_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_user_num_)));
          set_has_total_user_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_server_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .commonproto.pb_server_type_t type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 svr_id = 2;
  if (has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svr_id(), output);
  }

  // required uint32 ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ip(), output);
  }

  // required uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // optional uint32 total_user_num = 5;
  if (has_total_user_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_user_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_server_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .commonproto.pb_server_type_t type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 svr_id = 2;
  if (has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svr_id(), target);
  }

  // required uint32 ip = 3;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ip(), target);
  }

  // required uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // optional uint32 total_user_num = 5;
  if (has_total_user_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_user_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_server_info_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .commonproto.pb_server_type_t type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 svr_id = 2;
    if (has_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_id());
    }

    // required uint32 ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // required uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 total_user_num = 5;
    if (has_total_user_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_user_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_server_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_server_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_server_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_server_info_t::MergeFrom(const pb_server_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svr_id()) {
      set_svr_id(from.svr_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_total_user_num()) {
      set_total_user_num(from.total_user_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_server_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_server_info_t::CopyFrom(const pb_server_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_server_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void pb_server_info_t::Swap(pb_server_info_t* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(svr_id_, other->svr_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(total_user_num_, other->total_user_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_server_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_server_info_t_descriptor_;
  metadata.reflection = pb_server_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_player_base_info_t::kUidFieldNumber;
const int pb_player_base_info_t::kNickFieldNumber;
#endif  // !_MSC_VER

pb_player_base_info_t::pb_player_base_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_player_base_info_t::InitAsDefaultInstance() {
}

pb_player_base_info_t::pb_player_base_info_t(const pb_player_base_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_player_base_info_t::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_player_base_info_t::~pb_player_base_info_t() {
  SharedDtor();
}

void pb_player_base_info_t::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (this != default_instance_) {
  }
}

void pb_player_base_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_player_base_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_player_base_info_t_descriptor_;
}

const pb_player_base_info_t& pb_player_base_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_player_base_info_t* pb_player_base_info_t::default_instance_ = NULL;

pb_player_base_info_t* pb_player_base_info_t::New() const {
  return new pb_player_base_info_t;
}

void pb_player_base_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_player_base_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick;
        break;
      }

      // optional string nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_player_base_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_player_base_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_player_base_info_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_player_base_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_player_base_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_player_base_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_player_base_info_t::MergeFrom(const pb_player_base_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_player_base_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_player_base_info_t::CopyFrom(const pb_player_base_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_player_base_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pb_player_base_info_t::Swap(pb_player_base_info_t* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(nick_, other->nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_player_base_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_player_base_info_t_descriptor_;
  metadata.reflection = pb_player_base_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_level_state_t::kChapterIdFieldNumber;
const int pb_level_state_t::kSectionIdFieldNumber;
const int pb_level_state_t::kLevelStarFieldNumber;
const int pb_level_state_t::kDailyCountFieldNumber;
const int pb_level_state_t::kCountFieldNumber;
const int pb_level_state_t::kDailyDateFieldNumber;
const int pb_level_state_t::kResetCountFieldNumber;
#endif  // !_MSC_VER

pb_level_state_t::pb_level_state_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_level_state_t::InitAsDefaultInstance() {
}

pb_level_state_t::pb_level_state_t(const pb_level_state_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_level_state_t::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0u;
  section_id_ = 0u;
  level_star_ = 0;
  daily_count_ = 0u;
  count_ = 0u;
  daily_date_ = 0u;
  reset_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_level_state_t::~pb_level_state_t() {
  SharedDtor();
}

void pb_level_state_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_level_state_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_level_state_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_level_state_t_descriptor_;
}

const pb_level_state_t& pb_level_state_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_level_state_t* pb_level_state_t::default_instance_ = NULL;

pb_level_state_t* pb_level_state_t::New() const {
  return new pb_level_state_t;
}

void pb_level_state_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0u;
    section_id_ = 0u;
    level_star_ = 0;
    daily_count_ = 0u;
    count_ = 0u;
    daily_date_ = 0u;
    reset_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_level_state_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 chapter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_section_id;
        break;
      }

      // required uint32 section_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_id_)));
          set_has_section_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level_star;
        break;
      }

      // required .commonproto.pb_level_star_t level_star = 4 [default = LEVEL_STAR_NONE];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_star:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonproto::pb_level_star_t_IsValid(value)) {
            set_level_star(static_cast< ::commonproto::pb_level_star_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_daily_count;
        break;
      }

      // optional uint32 daily_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_count_)));
          set_has_daily_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_daily_date;
        break;
      }

      // optional uint32 daily_date = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_date_)));
          set_has_daily_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_reset_count;
        break;
      }

      // optional uint32 reset_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_count_)));
          set_has_reset_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_level_state_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 chapter_id = 2;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chapter_id(), output);
  }

  // required uint32 section_id = 3;
  if (has_section_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->section_id(), output);
  }

  // required .commonproto.pb_level_star_t level_star = 4 [default = LEVEL_STAR_NONE];
  if (has_level_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->level_star(), output);
  }

  // optional uint32 daily_count = 5;
  if (has_daily_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->daily_count(), output);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // optional uint32 daily_date = 7;
  if (has_daily_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->daily_date(), output);
  }

  // optional uint32 reset_count = 8;
  if (has_reset_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->reset_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_level_state_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 chapter_id = 2;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chapter_id(), target);
  }

  // required uint32 section_id = 3;
  if (has_section_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->section_id(), target);
  }

  // required .commonproto.pb_level_star_t level_star = 4 [default = LEVEL_STAR_NONE];
  if (has_level_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->level_star(), target);
  }

  // optional uint32 daily_count = 5;
  if (has_daily_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->daily_count(), target);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // optional uint32 daily_date = 7;
  if (has_daily_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->daily_date(), target);
  }

  // optional uint32 reset_count = 8;
  if (has_reset_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->reset_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_level_state_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 chapter_id = 2;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // required uint32 section_id = 3;
    if (has_section_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_id());
    }

    // required .commonproto.pb_level_star_t level_star = 4 [default = LEVEL_STAR_NONE];
    if (has_level_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level_star());
    }

    // optional uint32 daily_count = 5;
    if (has_daily_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_count());
    }

    // optional uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 daily_date = 7;
    if (has_daily_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_date());
    }

    // optional uint32 reset_count = 8;
    if (has_reset_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_level_state_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_level_state_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_level_state_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_level_state_t::MergeFrom(const pb_level_state_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_section_id()) {
      set_section_id(from.section_id());
    }
    if (from.has_level_star()) {
      set_level_star(from.level_star());
    }
    if (from.has_daily_count()) {
      set_daily_count(from.daily_count());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_daily_date()) {
      set_daily_date(from.daily_date());
    }
    if (from.has_reset_count()) {
      set_reset_count(from.reset_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_level_state_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_level_state_t::CopyFrom(const pb_level_state_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_level_state_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void pb_level_state_t::Swap(pb_level_state_t* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(section_id_, other->section_id_);
    std::swap(level_star_, other->level_star_);
    std::swap(daily_count_, other->daily_count_);
    std::swap(count_, other->count_);
    std::swap(daily_date_, other->daily_date_);
    std::swap(reset_count_, other->reset_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_level_state_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_level_state_t_descriptor_;
  metadata.reflection = pb_level_state_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_level_state_list_t::kLevelStatesFieldNumber;
#endif  // !_MSC_VER

pb_level_state_list_t::pb_level_state_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_level_state_list_t::InitAsDefaultInstance() {
}

pb_level_state_list_t::pb_level_state_list_t(const pb_level_state_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_level_state_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_level_state_list_t::~pb_level_state_list_t() {
  SharedDtor();
}

void pb_level_state_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_level_state_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_level_state_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_level_state_list_t_descriptor_;
}

const pb_level_state_list_t& pb_level_state_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_level_state_list_t* pb_level_state_list_t::default_instance_ = NULL;

pb_level_state_list_t* pb_level_state_list_t::New() const {
  return new pb_level_state_list_t;
}

void pb_level_state_list_t::Clear() {
  level_states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_level_state_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_level_state_t level_states = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_states()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_level_states;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_level_state_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_level_state_t level_states = 1;
  for (int i = 0; i < this->level_states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->level_states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_level_state_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_level_state_t level_states = 1;
  for (int i = 0; i < this->level_states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->level_states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_level_state_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_level_state_t level_states = 1;
  total_size += 1 * this->level_states_size();
  for (int i = 0; i < this->level_states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_states(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_level_state_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_level_state_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_level_state_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_level_state_list_t::MergeFrom(const pb_level_state_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_states_.MergeFrom(from.level_states_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_level_state_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_level_state_list_t::CopyFrom(const pb_level_state_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_level_state_list_t::IsInitialized() const {

  for (int i = 0; i < level_states_size(); i++) {
    if (!this->level_states(i).IsInitialized()) return false;
  }
  return true;
}

void pb_level_state_list_t::Swap(pb_level_state_list_t* other) {
  if (other != this) {
    level_states_.Swap(&other->level_states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_level_state_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_level_state_list_t_descriptor_;
  metadata.reflection = pb_level_state_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_mijing_t::kChapterIdFieldNumber;
const int pb_mijing_t::kDailyCountFieldNumber;
const int pb_mijing_t::kDailyDateFieldNumber;
#endif  // !_MSC_VER

pb_mijing_t::pb_mijing_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_mijing_t::InitAsDefaultInstance() {
}

pb_mijing_t::pb_mijing_t(const pb_mijing_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_mijing_t::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0u;
  daily_count_ = 0u;
  daily_date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_mijing_t::~pb_mijing_t() {
  SharedDtor();
}

void pb_mijing_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_mijing_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_mijing_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_mijing_t_descriptor_;
}

const pb_mijing_t& pb_mijing_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_mijing_t* pb_mijing_t::default_instance_ = NULL;

pb_mijing_t* pb_mijing_t::New() const {
  return new pb_mijing_t;
}

void pb_mijing_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0u;
    daily_count_ = 0u;
    daily_date_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_mijing_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_daily_count;
        break;
      }

      // optional uint32 daily_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_count_)));
          set_has_daily_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_daily_date;
        break;
      }

      // optional uint32 daily_date = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_date_)));
          set_has_daily_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_mijing_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapter_id(), output);
  }

  // optional uint32 daily_count = 3;
  if (has_daily_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->daily_count(), output);
  }

  // optional uint32 daily_date = 5;
  if (has_daily_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->daily_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_mijing_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapter_id(), target);
  }

  // optional uint32 daily_count = 3;
  if (has_daily_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->daily_count(), target);
  }

  // optional uint32 daily_date = 5;
  if (has_daily_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->daily_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_mijing_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // optional uint32 daily_count = 3;
    if (has_daily_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_count());
    }

    // optional uint32 daily_date = 5;
    if (has_daily_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_mijing_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_mijing_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_mijing_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_mijing_t::MergeFrom(const pb_mijing_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_daily_count()) {
      set_daily_count(from.daily_count());
    }
    if (from.has_daily_date()) {
      set_daily_date(from.daily_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_mijing_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_mijing_t::CopyFrom(const pb_mijing_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_mijing_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pb_mijing_t::Swap(pb_mijing_t* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(daily_count_, other->daily_count_);
    std::swap(daily_date_, other->daily_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_mijing_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_mijing_t_descriptor_;
  metadata.reflection = pb_mijing_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_mijing_list_t::kMijingFieldNumber;
#endif  // !_MSC_VER

pb_mijing_list_t::pb_mijing_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_mijing_list_t::InitAsDefaultInstance() {
}

pb_mijing_list_t::pb_mijing_list_t(const pb_mijing_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_mijing_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_mijing_list_t::~pb_mijing_list_t() {
  SharedDtor();
}

void pb_mijing_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_mijing_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_mijing_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_mijing_list_t_descriptor_;
}

const pb_mijing_list_t& pb_mijing_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_mijing_list_t* pb_mijing_list_t::default_instance_ = NULL;

pb_mijing_list_t* pb_mijing_list_t::New() const {
  return new pb_mijing_list_t;
}

void pb_mijing_list_t::Clear() {
  mijing_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_mijing_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_mijing_t mijing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mijing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mijing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mijing;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_mijing_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_mijing_t mijing = 1;
  for (int i = 0; i < this->mijing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mijing(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_mijing_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_mijing_t mijing = 1;
  for (int i = 0; i < this->mijing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mijing(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_mijing_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_mijing_t mijing = 1;
  total_size += 1 * this->mijing_size();
  for (int i = 0; i < this->mijing_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mijing(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_mijing_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_mijing_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_mijing_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_mijing_list_t::MergeFrom(const pb_mijing_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mijing_.MergeFrom(from.mijing_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_mijing_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_mijing_list_t::CopyFrom(const pb_mijing_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_mijing_list_t::IsInitialized() const {

  for (int i = 0; i < mijing_size(); i++) {
    if (!this->mijing(i).IsInitialized()) return false;
  }
  return true;
}

void pb_mijing_list_t::Swap(pb_mijing_list_t* other) {
  if (other != this) {
    mijing_.Swap(&other->mijing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_mijing_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_mijing_list_t_descriptor_;
  metadata.reflection = pb_mijing_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_hero_equip_t::kLvFieldNumber;
const int pb_hero_equip_t::kExpFieldNumber;
#endif  // !_MSC_VER

pb_hero_equip_t::pb_hero_equip_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_hero_equip_t::InitAsDefaultInstance() {
}

pb_hero_equip_t::pb_hero_equip_t(const pb_hero_equip_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_hero_equip_t::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 1u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_hero_equip_t::~pb_hero_equip_t() {
  SharedDtor();
}

void pb_hero_equip_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_hero_equip_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_hero_equip_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_hero_equip_t_descriptor_;
}

const pb_hero_equip_t& pb_hero_equip_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_hero_equip_t* pb_hero_equip_t::default_instance_ = NULL;

pb_hero_equip_t* pb_hero_equip_t::New() const {
  return new pb_hero_equip_t;
}

void pb_hero_equip_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 1u;
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_hero_equip_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 lv = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required uint32 exp = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_hero_equip_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 lv = 1 [default = 1];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  // required uint32 exp = 2 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_hero_equip_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 lv = 1 [default = 1];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lv(), target);
  }

  // required uint32 exp = 2 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_hero_equip_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 lv = 1 [default = 1];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 exp = 2 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_hero_equip_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_hero_equip_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_hero_equip_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_hero_equip_t::MergeFrom(const pb_hero_equip_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_hero_equip_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_hero_equip_t::CopyFrom(const pb_hero_equip_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_hero_equip_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pb_hero_equip_t::Swap(pb_hero_equip_t* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_hero_equip_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_hero_equip_t_descriptor_;
  metadata.reflection = pb_hero_equip_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_hero_attr_t::kTypeFieldNumber;
const int pb_hero_attr_t::kValueFieldNumber;
#endif  // !_MSC_VER

pb_hero_attr_t::pb_hero_attr_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_hero_attr_t::InitAsDefaultInstance() {
}

pb_hero_attr_t::pb_hero_attr_t(const pb_hero_attr_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_hero_attr_t::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_hero_attr_t::~pb_hero_attr_t() {
  SharedDtor();
}

void pb_hero_attr_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_hero_attr_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_hero_attr_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_hero_attr_t_descriptor_;
}

const pb_hero_attr_t& pb_hero_attr_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_hero_attr_t* pb_hero_attr_t::default_instance_ = NULL;

pb_hero_attr_t* pb_hero_attr_t::New() const {
  return new pb_hero_attr_t;
}

void pb_hero_attr_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_hero_attr_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .commonproto.pb_hero_attr_type_t type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonproto::pb_hero_attr_type_t_IsValid(value)) {
            set_type(static_cast< ::commonproto::pb_hero_attr_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_hero_attr_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .commonproto.pb_hero_attr_type_t type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_hero_attr_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .commonproto.pb_hero_attr_type_t type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_hero_attr_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .commonproto.pb_hero_attr_type_t type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_hero_attr_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_hero_attr_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_hero_attr_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_hero_attr_t::MergeFrom(const pb_hero_attr_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_hero_attr_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_hero_attr_t::CopyFrom(const pb_hero_attr_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_hero_attr_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pb_hero_attr_t::Swap(pb_hero_attr_t* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_hero_attr_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_hero_attr_t_descriptor_;
  metadata.reflection = pb_hero_attr_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_hero_attr_list_t::kHeroIdFieldNumber;
const int pb_hero_attr_list_t::kHeroAttrsFieldNumber;
#endif  // !_MSC_VER

pb_hero_attr_list_t::pb_hero_attr_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_hero_attr_list_t::InitAsDefaultInstance() {
}

pb_hero_attr_list_t::pb_hero_attr_list_t(const pb_hero_attr_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_hero_attr_list_t::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_hero_attr_list_t::~pb_hero_attr_list_t() {
  SharedDtor();
}

void pb_hero_attr_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_hero_attr_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_hero_attr_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_hero_attr_list_t_descriptor_;
}

const pb_hero_attr_list_t& pb_hero_attr_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_hero_attr_list_t* pb_hero_attr_list_t::default_instance_ = NULL;

pb_hero_attr_list_t* pb_hero_attr_list_t::New() const {
  return new pb_hero_attr_list_t;
}

void pb_hero_attr_list_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
  }
  hero_attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_hero_attr_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_attrs;
        break;
      }

      // repeated .commonproto.pb_hero_attr_t hero_attrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_attrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_hero_attr_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // repeated .commonproto.pb_hero_attr_t hero_attrs = 2;
  for (int i = 0; i < this->hero_attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero_attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_hero_attr_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // repeated .commonproto.pb_hero_attr_t hero_attrs = 2;
  for (int i = 0; i < this->hero_attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero_attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_hero_attr_list_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  // repeated .commonproto.pb_hero_attr_t hero_attrs = 2;
  total_size += 1 * this->hero_attrs_size();
  for (int i = 0; i < this->hero_attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_hero_attr_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_hero_attr_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_hero_attr_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_hero_attr_list_t::MergeFrom(const pb_hero_attr_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_attrs_.MergeFrom(from.hero_attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_hero_attr_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_hero_attr_list_t::CopyFrom(const pb_hero_attr_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_hero_attr_list_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < hero_attrs_size(); i++) {
    if (!this->hero_attrs(i).IsInitialized()) return false;
  }
  return true;
}

void pb_hero_attr_list_t::Swap(pb_hero_attr_list_t* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    hero_attrs_.Swap(&other->hero_attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_hero_attr_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_hero_attr_list_t_descriptor_;
  metadata.reflection = pb_hero_attr_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_skill_t::kSkillLvFieldNumber;
const int pb_skill_t::kSkillRatingFieldNumber;
const int pb_skill_t::kSkillIndexFieldNumber;
#endif  // !_MSC_VER

pb_skill_t::pb_skill_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_skill_t::InitAsDefaultInstance() {
}

pb_skill_t::pb_skill_t(const pb_skill_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_skill_t::SharedCtor() {
  _cached_size_ = 0;
  skill_lv_ = 0u;
  skill_rating_ = 0u;
  skill_index_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_skill_t::~pb_skill_t() {
  SharedDtor();
}

void pb_skill_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_skill_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_skill_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_skill_t_descriptor_;
}

const pb_skill_t& pb_skill_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_skill_t* pb_skill_t::default_instance_ = NULL;

pb_skill_t* pb_skill_t::New() const {
  return new pb_skill_t;
}

void pb_skill_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_lv_ = 0u;
    skill_rating_ = 0u;
    skill_index_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_skill_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_lv_)));
          set_has_skill_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_rating;
        break;
      }

      // required uint32 skill_rating = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_rating_)));
          set_has_skill_rating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_index;
        break;
      }

      // required .commonproto.pb_skill_type_t skill_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_index:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonproto::pb_skill_type_t_IsValid(value)) {
            set_skill_index(static_cast< ::commonproto::pb_skill_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_skill_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_lv = 1;
  if (has_skill_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_lv(), output);
  }

  // required uint32 skill_rating = 2;
  if (has_skill_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_rating(), output);
  }

  // required .commonproto.pb_skill_type_t skill_index = 3;
  if (has_skill_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->skill_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_skill_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_lv = 1;
  if (has_skill_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_lv(), target);
  }

  // required uint32 skill_rating = 2;
  if (has_skill_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_rating(), target);
  }

  // required .commonproto.pb_skill_type_t skill_index = 3;
  if (has_skill_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->skill_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_skill_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_lv = 1;
    if (has_skill_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_lv());
    }

    // required uint32 skill_rating = 2;
    if (has_skill_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_rating());
    }

    // required .commonproto.pb_skill_type_t skill_index = 3;
    if (has_skill_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->skill_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_skill_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_skill_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_skill_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_skill_t::MergeFrom(const pb_skill_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_lv()) {
      set_skill_lv(from.skill_lv());
    }
    if (from.has_skill_rating()) {
      set_skill_rating(from.skill_rating());
    }
    if (from.has_skill_index()) {
      set_skill_index(from.skill_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_skill_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_skill_t::CopyFrom(const pb_skill_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_skill_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void pb_skill_t::Swap(pb_skill_t* other) {
  if (other != this) {
    std::swap(skill_lv_, other->skill_lv_);
    std::swap(skill_rating_, other->skill_rating_);
    std::swap(skill_index_, other->skill_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_skill_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_skill_t_descriptor_;
  metadata.reflection = pb_skill_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_skill_list_t::kSkillsFieldNumber;
#endif  // !_MSC_VER

pb_skill_list_t::pb_skill_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_skill_list_t::InitAsDefaultInstance() {
}

pb_skill_list_t::pb_skill_list_t(const pb_skill_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_skill_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_skill_list_t::~pb_skill_list_t() {
  SharedDtor();
}

void pb_skill_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_skill_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_skill_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_skill_list_t_descriptor_;
}

const pb_skill_list_t& pb_skill_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_skill_list_t* pb_skill_list_t::default_instance_ = NULL;

pb_skill_list_t* pb_skill_list_t::New() const {
  return new pb_skill_list_t;
}

void pb_skill_list_t::Clear() {
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_skill_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_skill_t skills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_skill_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_skill_t skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_skill_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_skill_t skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_skill_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_skill_t skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_skill_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_skill_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_skill_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_skill_list_t::MergeFrom(const pb_skill_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_skill_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_skill_list_t::CopyFrom(const pb_skill_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_skill_list_t::IsInitialized() const {

  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void pb_skill_list_t::Swap(pb_skill_list_t* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_skill_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_skill_list_t_descriptor_;
  metadata.reflection = pb_skill_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_hero_t::kHeroIdFieldNumber;
const int pb_hero_t::kLvFieldNumber;
const int pb_hero_t::kExpFieldNumber;
const int pb_hero_t::kRatingFieldNumber;
const int pb_hero_t::kStarRatingFieldNumber;
const int pb_hero_t::kHeroEquipsFieldNumber;
const int pb_hero_t::kSkillsFieldNumber;
const int pb_hero_t::kCdFieldNumber;
const int pb_hero_t::kHpFieldNumber;
#endif  // !_MSC_VER

pb_hero_t::pb_hero_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_hero_t::InitAsDefaultInstance() {
}

pb_hero_t::pb_hero_t(const pb_hero_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_hero_t::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  lv_ = 0u;
  exp_ = 0u;
  rating_ = 0u;
  star_rating_ = 0u;
  cd_ = 0u;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_hero_t::~pb_hero_t() {
  SharedDtor();
}

void pb_hero_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_hero_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_hero_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_hero_t_descriptor_;
}

const pb_hero_t& pb_hero_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_hero_t* pb_hero_t::default_instance_ = NULL;

pb_hero_t* pb_hero_t::New() const {
  return new pb_hero_t;
}

void pb_hero_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    lv_ = 0u;
    exp_ = 0u;
    rating_ = 0u;
    star_rating_ = 0u;
    cd_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hp_ = 0u;
  }
  hero_equips_.Clear();
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_hero_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // required uint32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rating;
        break;
      }

      // required uint32 rating = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star_rating;
        break;
      }

      // required uint32 star_rating = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_rating_)));
          set_has_star_rating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hero_equips;
        break;
      }

      // repeated .commonproto.pb_hero_equip_t hero_equips = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hero_equips;
        if (input->ExpectTag(74)) goto parse_skills;
        break;
      }

      // repeated .commonproto.pb_skill_t skills = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skills;
        if (input->ExpectTag(80)) goto parse_cd;
        break;
      }

      // optional uint32 cd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_hero_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lv(), output);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // required uint32 rating = 4;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rating(), output);
  }

  // required uint32 star_rating = 5;
  if (has_star_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->star_rating(), output);
  }

  // repeated .commonproto.pb_hero_equip_t hero_equips = 6;
  for (int i = 0; i < this->hero_equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hero_equips(i), output);
  }

  // repeated .commonproto.pb_skill_t skills = 9;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->skills(i), output);
  }

  // optional uint32 cd = 10;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cd(), output);
  }

  // optional uint32 hp = 11;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_hero_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lv(), target);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // required uint32 rating = 4;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rating(), target);
  }

  // required uint32 star_rating = 5;
  if (has_star_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->star_rating(), target);
  }

  // repeated .commonproto.pb_hero_equip_t hero_equips = 6;
  for (int i = 0; i < this->hero_equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->hero_equips(i), target);
  }

  // repeated .commonproto.pb_skill_t skills = 9;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->skills(i), target);
  }

  // optional uint32 cd = 10;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cd(), target);
  }

  // optional uint32 hp = 11;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_hero_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 rating = 4;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rating());
    }

    // required uint32 star_rating = 5;
    if (has_star_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_rating());
    }

    // optional uint32 cd = 10;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hp = 11;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  // repeated .commonproto.pb_hero_equip_t hero_equips = 6;
  total_size += 1 * this->hero_equips_size();
  for (int i = 0; i < this->hero_equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_equips(i));
  }

  // repeated .commonproto.pb_skill_t skills = 9;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_hero_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_hero_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_hero_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_hero_t::MergeFrom(const pb_hero_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_equips_.MergeFrom(from.hero_equips_);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_star_rating()) {
      set_star_rating(from.star_rating());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_hero_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_hero_t::CopyFrom(const pb_hero_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_hero_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < hero_equips_size(); i++) {
    if (!this->hero_equips(i).IsInitialized()) return false;
  }
  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void pb_hero_t::Swap(pb_hero_t* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(rating_, other->rating_);
    std::swap(star_rating_, other->star_rating_);
    hero_equips_.Swap(&other->hero_equips_);
    skills_.Swap(&other->skills_);
    std::swap(cd_, other->cd_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_hero_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_hero_t_descriptor_;
  metadata.reflection = pb_hero_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_hero_list_t::kHerosFieldNumber;
#endif  // !_MSC_VER

pb_hero_list_t::pb_hero_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_hero_list_t::InitAsDefaultInstance() {
}

pb_hero_list_t::pb_hero_list_t(const pb_hero_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_hero_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_hero_list_t::~pb_hero_list_t() {
  SharedDtor();
}

void pb_hero_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_hero_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_hero_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_hero_list_t_descriptor_;
}

const pb_hero_list_t& pb_hero_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_hero_list_t* pb_hero_list_t::default_instance_ = NULL;

pb_hero_list_t* pb_hero_list_t::New() const {
  return new pb_hero_list_t;
}

void pb_hero_list_t::Clear() {
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_hero_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_hero_t heros = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_hero_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_hero_t heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_hero_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_hero_t heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_hero_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_hero_t heros = 1;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_hero_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_hero_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_hero_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_hero_list_t::MergeFrom(const pb_hero_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_hero_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_hero_list_t::CopyFrom(const pb_hero_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_hero_list_t::IsInitialized() const {

  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void pb_hero_list_t::Swap(pb_hero_list_t* other) {
  if (other != this) {
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_hero_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_hero_list_t_descriptor_;
  metadata.reflection = pb_hero_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_queue_hero_t::kHeroPosFieldNumber;
const int pb_queue_hero_t::kHeroIdFieldNumber;
const int pb_queue_hero_t::kStarRatingFieldNumber;
const int pb_queue_hero_t::kRatingFieldNumber;
const int pb_queue_hero_t::kBtlValFieldNumber;
#endif  // !_MSC_VER

pb_queue_hero_t::pb_queue_hero_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_queue_hero_t::InitAsDefaultInstance() {
}

pb_queue_hero_t::pb_queue_hero_t(const pb_queue_hero_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_queue_hero_t::SharedCtor() {
  _cached_size_ = 0;
  hero_pos_ = 0u;
  hero_id_ = 0u;
  star_rating_ = 0u;
  rating_ = 0u;
  btl_val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_queue_hero_t::~pb_queue_hero_t() {
  SharedDtor();
}

void pb_queue_hero_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_queue_hero_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_queue_hero_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_queue_hero_t_descriptor_;
}

const pb_queue_hero_t& pb_queue_hero_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_queue_hero_t* pb_queue_hero_t::default_instance_ = NULL;

pb_queue_hero_t* pb_queue_hero_t::New() const {
  return new pb_queue_hero_t;
}

void pb_queue_hero_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_pos_ = 0u;
    hero_id_ = 0u;
    star_rating_ = 0u;
    rating_ = 0u;
    btl_val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_queue_hero_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_pos_)));
          set_has_hero_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star_rating;
        break;
      }

      // optional uint32 star_rating = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_rating_)));
          set_has_star_rating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rating;
        break;
      }

      // optional uint32 rating = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_btl_val;
        break;
      }

      // optional uint32 btl_val = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btl_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &btl_val_)));
          set_has_btl_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_queue_hero_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_pos = 1;
  if (has_hero_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_pos(), output);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 star_rating = 3;
  if (has_star_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star_rating(), output);
  }

  // optional uint32 rating = 4;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rating(), output);
  }

  // optional uint32 btl_val = 5;
  if (has_btl_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->btl_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_queue_hero_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_pos = 1;
  if (has_hero_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_pos(), target);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 star_rating = 3;
  if (has_star_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star_rating(), target);
  }

  // optional uint32 rating = 4;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rating(), target);
  }

  // optional uint32 btl_val = 5;
  if (has_btl_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->btl_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_queue_hero_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_pos = 1;
    if (has_hero_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_pos());
    }

    // required uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 star_rating = 3;
    if (has_star_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_rating());
    }

    // optional uint32 rating = 4;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rating());
    }

    // optional uint32 btl_val = 5;
    if (has_btl_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->btl_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_queue_hero_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_queue_hero_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_queue_hero_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_queue_hero_t::MergeFrom(const pb_queue_hero_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_pos()) {
      set_hero_pos(from.hero_pos());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_star_rating()) {
      set_star_rating(from.star_rating());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_btl_val()) {
      set_btl_val(from.btl_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_queue_hero_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_queue_hero_t::CopyFrom(const pb_queue_hero_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_queue_hero_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pb_queue_hero_t::Swap(pb_queue_hero_t* other) {
  if (other != this) {
    std::swap(hero_pos_, other->hero_pos_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(star_rating_, other->star_rating_);
    std::swap(rating_, other->rating_);
    std::swap(btl_val_, other->btl_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_queue_hero_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_queue_hero_t_descriptor_;
  metadata.reflection = pb_queue_hero_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_battle_queue_t::kQueueHeroFieldNumber;
const int pb_battle_queue_t::kQueueTypeFieldNumber;
const int pb_battle_queue_t::kTotalBtlValFieldNumber;
#endif  // !_MSC_VER

pb_battle_queue_t::pb_battle_queue_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_battle_queue_t::InitAsDefaultInstance() {
}

pb_battle_queue_t::pb_battle_queue_t(const pb_battle_queue_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_battle_queue_t::SharedCtor() {
  _cached_size_ = 0;
  queue_type_ = 0;
  total_btl_val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_battle_queue_t::~pb_battle_queue_t() {
  SharedDtor();
}

void pb_battle_queue_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_battle_queue_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_battle_queue_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_battle_queue_t_descriptor_;
}

const pb_battle_queue_t& pb_battle_queue_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_battle_queue_t* pb_battle_queue_t::default_instance_ = NULL;

pb_battle_queue_t* pb_battle_queue_t::New() const {
  return new pb_battle_queue_t;
}

void pb_battle_queue_t::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    queue_type_ = 0;
    total_btl_val_ = 0u;
  }
  queue_hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_battle_queue_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_queue_hero_t queue_hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queue_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queue_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_queue_hero;
        if (input->ExpectTag(16)) goto parse_queue_type;
        break;
      }

      // required .commonproto.pb_queue_type_t queue_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonproto::pb_queue_type_t_IsValid(value)) {
            set_queue_type(static_cast< ::commonproto::pb_queue_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_btl_val;
        break;
      }

      // optional uint32 total_btl_val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_btl_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_btl_val_)));
          set_has_total_btl_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_battle_queue_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_queue_hero_t queue_hero = 1;
  for (int i = 0; i < this->queue_hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queue_hero(i), output);
  }

  // required .commonproto.pb_queue_type_t queue_type = 2;
  if (has_queue_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->queue_type(), output);
  }

  // optional uint32 total_btl_val = 3;
  if (has_total_btl_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_btl_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_battle_queue_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_queue_hero_t queue_hero = 1;
  for (int i = 0; i < this->queue_hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->queue_hero(i), target);
  }

  // required .commonproto.pb_queue_type_t queue_type = 2;
  if (has_queue_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->queue_type(), target);
  }

  // optional uint32 total_btl_val = 3;
  if (has_total_btl_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_btl_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_battle_queue_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .commonproto.pb_queue_type_t queue_type = 2;
    if (has_queue_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->queue_type());
    }

    // optional uint32 total_btl_val = 3;
    if (has_total_btl_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_btl_val());
    }

  }
  // repeated .commonproto.pb_queue_hero_t queue_hero = 1;
  total_size += 1 * this->queue_hero_size();
  for (int i = 0; i < this->queue_hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queue_hero(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_battle_queue_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_battle_queue_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_battle_queue_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_battle_queue_t::MergeFrom(const pb_battle_queue_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  queue_hero_.MergeFrom(from.queue_hero_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_queue_type()) {
      set_queue_type(from.queue_type());
    }
    if (from.has_total_btl_val()) {
      set_total_btl_val(from.total_btl_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_battle_queue_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_battle_queue_t::CopyFrom(const pb_battle_queue_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_battle_queue_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < queue_hero_size(); i++) {
    if (!this->queue_hero(i).IsInitialized()) return false;
  }
  return true;
}

void pb_battle_queue_t::Swap(pb_battle_queue_t* other) {
  if (other != this) {
    queue_hero_.Swap(&other->queue_hero_);
    std::swap(queue_type_, other->queue_type_);
    std::swap(total_btl_val_, other->total_btl_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_battle_queue_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_battle_queue_t_descriptor_;
  metadata.reflection = pb_battle_queue_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_battle_queue_list_t::kBattleQueuesFieldNumber;
#endif  // !_MSC_VER

pb_battle_queue_list_t::pb_battle_queue_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_battle_queue_list_t::InitAsDefaultInstance() {
  battle_queues_ = const_cast< ::commonproto::pb_battle_queue_t*>(&::commonproto::pb_battle_queue_t::default_instance());
}

pb_battle_queue_list_t::pb_battle_queue_list_t(const pb_battle_queue_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_battle_queue_list_t::SharedCtor() {
  _cached_size_ = 0;
  battle_queues_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_battle_queue_list_t::~pb_battle_queue_list_t() {
  SharedDtor();
}

void pb_battle_queue_list_t::SharedDtor() {
  if (this != default_instance_) {
    delete battle_queues_;
  }
}

void pb_battle_queue_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_battle_queue_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_battle_queue_list_t_descriptor_;
}

const pb_battle_queue_list_t& pb_battle_queue_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_battle_queue_list_t* pb_battle_queue_list_t::default_instance_ = NULL;

pb_battle_queue_list_t* pb_battle_queue_list_t::New() const {
  return new pb_battle_queue_list_t;
}

void pb_battle_queue_list_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battle_queues()) {
      if (battle_queues_ != NULL) battle_queues_->::commonproto::pb_battle_queue_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_battle_queue_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .commonproto.pb_battle_queue_t battle_queues = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_queues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_battle_queue_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .commonproto.pb_battle_queue_t battle_queues = 1;
  if (has_battle_queues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_queues(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_battle_queue_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .commonproto.pb_battle_queue_t battle_queues = 1;
  if (has_battle_queues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_queues(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_battle_queue_list_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .commonproto.pb_battle_queue_t battle_queues = 1;
    if (has_battle_queues()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_queues());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_battle_queue_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_battle_queue_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_battle_queue_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_battle_queue_list_t::MergeFrom(const pb_battle_queue_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_queues()) {
      mutable_battle_queues()->::commonproto::pb_battle_queue_t::MergeFrom(from.battle_queues());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_battle_queue_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_battle_queue_list_t::CopyFrom(const pb_battle_queue_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_battle_queue_list_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_battle_queues()) {
    if (!this->battle_queues().IsInitialized()) return false;
  }
  return true;
}

void pb_battle_queue_list_t::Swap(pb_battle_queue_list_t* other) {
  if (other != this) {
    std::swap(battle_queues_, other->battle_queues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_battle_queue_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_battle_queue_list_t_descriptor_;
  metadata.reflection = pb_battle_queue_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_attr_t::kTypeFieldNumber;
const int pb_attr_t::kValueFieldNumber;
#endif  // !_MSC_VER

pb_attr_t::pb_attr_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_attr_t::InitAsDefaultInstance() {
}

pb_attr_t::pb_attr_t(const pb_attr_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_attr_t::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_attr_t::~pb_attr_t() {
  SharedDtor();
}

void pb_attr_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_attr_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_attr_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_attr_t_descriptor_;
}

const pb_attr_t& pb_attr_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_attr_t* pb_attr_t::default_instance_ = NULL;

pb_attr_t* pb_attr_t::New() const {
  return new pb_attr_t;
}

void pb_attr_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_attr_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_attr_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_attr_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_attr_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_attr_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_attr_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_attr_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_attr_t::MergeFrom(const pb_attr_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_attr_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_attr_t::CopyFrom(const pb_attr_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_attr_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pb_attr_t::Swap(pb_attr_t* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_attr_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_attr_t_descriptor_;
  metadata.reflection = pb_attr_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_attr_list_t::kAttrsFieldNumber;
#endif  // !_MSC_VER

pb_attr_list_t::pb_attr_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_attr_list_t::InitAsDefaultInstance() {
}

pb_attr_list_t::pb_attr_list_t(const pb_attr_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_attr_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_attr_list_t::~pb_attr_list_t() {
  SharedDtor();
}

void pb_attr_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_attr_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_attr_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_attr_list_t_descriptor_;
}

const pb_attr_list_t& pb_attr_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_attr_list_t* pb_attr_list_t::default_instance_ = NULL;

pb_attr_list_t* pb_attr_list_t::New() const {
  return new pb_attr_list_t;
}

void pb_attr_list_t::Clear() {
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_attr_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_attr_t attrs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_attr_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_attr_t attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_attr_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_attr_t attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_attr_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_attr_t attrs = 1;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_attr_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_attr_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_attr_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_attr_list_t::MergeFrom(const pb_attr_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_attr_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_attr_list_t::CopyFrom(const pb_attr_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_attr_list_t::IsInitialized() const {

  for (int i = 0; i < attrs_size(); i++) {
    if (!this->attrs(i).IsInitialized()) return false;
  }
  return true;
}

void pb_attr_list_t::Swap(pb_attr_list_t* other) {
  if (other != this) {
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_attr_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_attr_list_t_descriptor_;
  metadata.reflection = pb_attr_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_item_t::kItemIdFieldNumber;
const int pb_item_t::kCountFieldNumber;
#endif  // !_MSC_VER

pb_item_t::pb_item_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_item_t::InitAsDefaultInstance() {
}

pb_item_t::pb_item_t(const pb_item_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_item_t::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_item_t::~pb_item_t() {
  SharedDtor();
}

void pb_item_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_item_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_item_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_item_t_descriptor_;
}

const pb_item_t& pb_item_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_item_t* pb_item_t::default_instance_ = NULL;

pb_item_t* pb_item_t::New() const {
  return new pb_item_t;
}

void pb_item_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_item_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_item_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_item_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_item_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_item_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_item_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_item_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_item_t::MergeFrom(const pb_item_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_item_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_item_t::CopyFrom(const pb_item_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_item_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pb_item_t::Swap(pb_item_t* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_item_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_item_t_descriptor_;
  metadata.reflection = pb_item_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_level_prize_t::kGoldFieldNumber;
const int pb_level_prize_t::kItemListFieldNumber;
const int pb_level_prize_t::kHeroExpFieldNumber;
const int pb_level_prize_t::kPlayerExpFieldNumber;
#endif  // !_MSC_VER

pb_level_prize_t::pb_level_prize_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_level_prize_t::InitAsDefaultInstance() {
  item_list_ = const_cast< ::commonproto::pb_item_list_t*>(&::commonproto::pb_item_list_t::default_instance());
}

pb_level_prize_t::pb_level_prize_t(const pb_level_prize_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_level_prize_t::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0u;
  item_list_ = NULL;
  hero_exp_ = 0u;
  player_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_level_prize_t::~pb_level_prize_t() {
  SharedDtor();
}

void pb_level_prize_t::SharedDtor() {
  if (this != default_instance_) {
    delete item_list_;
  }
}

void pb_level_prize_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_level_prize_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_level_prize_t_descriptor_;
}

const pb_level_prize_t& pb_level_prize_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_level_prize_t* pb_level_prize_t::default_instance_ = NULL;

pb_level_prize_t* pb_level_prize_t::New() const {
  return new pb_level_prize_t;
}

void pb_level_prize_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = 0u;
    if (has_item_list()) {
      if (item_list_ != NULL) item_list_->::commonproto::pb_item_list_t::Clear();
    }
    hero_exp_ = 0u;
    player_exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_level_prize_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // required .commonproto.pb_item_list_t item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_exp;
        break;
      }

      // required uint32 hero_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_exp_)));
          set_has_hero_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_exp;
        break;
      }

      // required uint32 player_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_exp_)));
          set_has_player_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_level_prize_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gold(), output);
  }

  // required .commonproto.pb_item_list_t item_list = 2;
  if (has_item_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(), output);
  }

  // required uint32 hero_exp = 3;
  if (has_hero_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_exp(), output);
  }

  // required uint32 player_exp = 4;
  if (has_player_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_level_prize_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gold(), target);
  }

  // required .commonproto.pb_item_list_t item_list = 2;
  if (has_item_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(), target);
  }

  // required uint32 hero_exp = 3;
  if (has_hero_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_exp(), target);
  }

  // required uint32 player_exp = 4;
  if (has_player_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_level_prize_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // required .commonproto.pb_item_list_t item_list = 2;
    if (has_item_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list());
    }

    // required uint32 hero_exp = 3;
    if (has_hero_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_exp());
    }

    // required uint32 player_exp = 4;
    if (has_player_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_level_prize_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_level_prize_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_level_prize_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_level_prize_t::MergeFrom(const pb_level_prize_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_item_list()) {
      mutable_item_list()->::commonproto::pb_item_list_t::MergeFrom(from.item_list());
    }
    if (from.has_hero_exp()) {
      set_hero_exp(from.hero_exp());
    }
    if (from.has_player_exp()) {
      set_player_exp(from.player_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_level_prize_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_level_prize_t::CopyFrom(const pb_level_prize_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_level_prize_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_item_list()) {
    if (!this->item_list().IsInitialized()) return false;
  }
  return true;
}

void pb_level_prize_t::Swap(pb_level_prize_t* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(item_list_, other->item_list_);
    std::swap(hero_exp_, other->hero_exp_);
    std::swap(player_exp_, other->player_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_level_prize_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_level_prize_t_descriptor_;
  metadata.reflection = pb_level_prize_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_item_list_t::kItemsFieldNumber;
#endif  // !_MSC_VER

pb_item_list_t::pb_item_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_item_list_t::InitAsDefaultInstance() {
}

pb_item_list_t::pb_item_list_t(const pb_item_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_item_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_item_list_t::~pb_item_list_t() {
  SharedDtor();
}

void pb_item_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_item_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_item_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_item_list_t_descriptor_;
}

const pb_item_list_t& pb_item_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_item_list_t* pb_item_list_t::default_instance_ = NULL;

pb_item_list_t* pb_item_list_t::New() const {
  return new pb_item_list_t;
}

void pb_item_list_t::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_item_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_item_t items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_item_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_item_t items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_item_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_item_t items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_item_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_item_t items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_item_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_item_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_item_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_item_list_t::MergeFrom(const pb_item_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_item_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_item_list_t::CopyFrom(const pb_item_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_item_list_t::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void pb_item_list_t::Swap(pb_item_list_t* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_item_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_item_list_t_descriptor_;
  metadata.reflection = pb_item_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_level_prize_list_t::kLevelPrizesFieldNumber;
#endif  // !_MSC_VER

pb_level_prize_list_t::pb_level_prize_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_level_prize_list_t::InitAsDefaultInstance() {
}

pb_level_prize_list_t::pb_level_prize_list_t(const pb_level_prize_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_level_prize_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_level_prize_list_t::~pb_level_prize_list_t() {
  SharedDtor();
}

void pb_level_prize_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_level_prize_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_level_prize_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_level_prize_list_t_descriptor_;
}

const pb_level_prize_list_t& pb_level_prize_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_level_prize_list_t* pb_level_prize_list_t::default_instance_ = NULL;

pb_level_prize_list_t* pb_level_prize_list_t::New() const {
  return new pb_level_prize_list_t;
}

void pb_level_prize_list_t::Clear() {
  level_prizes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_level_prize_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_level_prize_t level_prizes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_prizes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_prizes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_level_prizes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_level_prize_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_level_prize_t level_prizes = 1;
  for (int i = 0; i < this->level_prizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->level_prizes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_level_prize_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_level_prize_t level_prizes = 1;
  for (int i = 0; i < this->level_prizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->level_prizes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_level_prize_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_level_prize_t level_prizes = 1;
  total_size += 1 * this->level_prizes_size();
  for (int i = 0; i < this->level_prizes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_prizes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_level_prize_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_level_prize_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_level_prize_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_level_prize_list_t::MergeFrom(const pb_level_prize_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_prizes_.MergeFrom(from.level_prizes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_level_prize_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_level_prize_list_t::CopyFrom(const pb_level_prize_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_level_prize_list_t::IsInitialized() const {

  for (int i = 0; i < level_prizes_size(); i++) {
    if (!this->level_prizes(i).IsInitialized()) return false;
  }
  return true;
}

void pb_level_prize_list_t::Swap(pb_level_prize_list_t* other) {
  if (other != this) {
    level_prizes_.Swap(&other->level_prizes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_level_prize_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_level_prize_list_t_descriptor_;
  metadata.reflection = pb_level_prize_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

pb_monster_t::pb_monster_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_monster_t::InitAsDefaultInstance() {
}

pb_monster_t::pb_monster_t(const pb_monster_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_monster_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_monster_t::~pb_monster_t() {
  SharedDtor();
}

void pb_monster_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_monster_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_monster_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_monster_t_descriptor_;
}

const pb_monster_t& pb_monster_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_monster_t* pb_monster_t::default_instance_ = NULL;

pb_monster_t* pb_monster_t::New() const {
  return new pb_monster_t;
}

void pb_monster_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_monster_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void pb_monster_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_monster_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_monster_t::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_monster_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_monster_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_monster_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_monster_t::MergeFrom(const pb_monster_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_monster_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_monster_t::CopyFrom(const pb_monster_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_monster_t::IsInitialized() const {

  return true;
}

void pb_monster_t::Swap(pb_monster_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_monster_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_monster_t_descriptor_;
  metadata.reflection = pb_monster_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_monster_list_t::kMonstersFieldNumber;
#endif  // !_MSC_VER

pb_monster_list_t::pb_monster_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_monster_list_t::InitAsDefaultInstance() {
}

pb_monster_list_t::pb_monster_list_t(const pb_monster_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_monster_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_monster_list_t::~pb_monster_list_t() {
  SharedDtor();
}

void pb_monster_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_monster_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_monster_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_monster_list_t_descriptor_;
}

const pb_monster_list_t& pb_monster_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_monster_list_t* pb_monster_list_t::default_instance_ = NULL;

pb_monster_list_t* pb_monster_list_t::New() const {
  return new pb_monster_list_t;
}

void pb_monster_list_t::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_monster_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_monster_t monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_monster_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_monster_t monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_monster_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_monster_t monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_monster_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_monster_t monsters = 1;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_monster_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_monster_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_monster_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_monster_list_t::MergeFrom(const pb_monster_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_monster_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_monster_list_t::CopyFrom(const pb_monster_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_monster_list_t::IsInitialized() const {

  return true;
}

void pb_monster_list_t::Swap(pb_monster_list_t* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_monster_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_monster_list_t_descriptor_;
  metadata.reflection = pb_monster_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_rank50_self_t::kUidFieldNumber;
const int pb_rank50_self_t::kSelfRankFieldNumber;
#endif  // !_MSC_VER

pb_rank50_self_t::pb_rank50_self_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_rank50_self_t::InitAsDefaultInstance() {
}

pb_rank50_self_t::pb_rank50_self_t(const pb_rank50_self_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_rank50_self_t::SharedCtor() {
  _cached_size_ = 0;
  self_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_rank50_self_t::~pb_rank50_self_t() {
  SharedDtor();
}

void pb_rank50_self_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_rank50_self_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_rank50_self_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_rank50_self_t_descriptor_;
}

const pb_rank50_self_t& pb_rank50_self_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_rank50_self_t* pb_rank50_self_t::default_instance_ = NULL;

pb_rank50_self_t* pb_rank50_self_t::New() const {
  return new pb_rank50_self_t;
}

void pb_rank50_self_t::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    self_rank_ = 0u;
  }
  uid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_rank50_self_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_uid;
        if (input->ExpectTag(16)) goto parse_self_rank;
        break;
      }

      // required uint32 self_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_rank_)));
          set_has_self_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_rank50_self_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 uid = 1;
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->uid(i), output);
  }

  // required uint32 self_rank = 2;
  if (has_self_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_rank50_self_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 uid = 1;
  for (int i = 0; i < this->uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->uid(i), target);
  }

  // required uint32 self_rank = 2;
  if (has_self_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_rank50_self_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 self_rank = 2;
    if (has_self_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_rank());
    }

  }
  // repeated uint32 uid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uid(i));
    }
    total_size += 1 * this->uid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_rank50_self_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_rank50_self_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_rank50_self_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_rank50_self_t::MergeFrom(const pb_rank50_self_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  uid_.MergeFrom(from.uid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_self_rank()) {
      set_self_rank(from.self_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_rank50_self_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_rank50_self_t::CopyFrom(const pb_rank50_self_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_rank50_self_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void pb_rank50_self_t::Swap(pb_rank50_self_t* other) {
  if (other != this) {
    uid_.Swap(&other->uid_);
    std::swap(self_rank_, other->self_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_rank50_self_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_rank50_self_t_descriptor_;
  metadata.reflection = pb_rank50_self_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_task_t::kTaskIdFieldNumber;
const int pb_task_t::kTaskLastDateFieldNumber;
const int pb_task_t::kBonusAcceptFieldNumber;
const int pb_task_t::kCountFieldNumber;
#endif  // !_MSC_VER

pb_task_t::pb_task_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_task_t::InitAsDefaultInstance() {
}

pb_task_t::pb_task_t(const pb_task_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_task_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  task_last_date_ = 0u;
  bonus_accept_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_task_t::~pb_task_t() {
  SharedDtor();
}

void pb_task_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_task_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_task_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_task_t_descriptor_;
}

const pb_task_t& pb_task_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_task_t* pb_task_t::default_instance_ = NULL;

pb_task_t* pb_task_t::New() const {
  return new pb_task_t;
}

void pb_task_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    task_last_date_ = 0u;
    bonus_accept_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_task_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_last_date;
        break;
      }

      // optional uint32 task_last_date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_last_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_last_date_)));
          set_has_task_last_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bonus_accept;
        break;
      }

      // optional uint32 bonus_accept = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_accept_)));
          set_has_bonus_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_task_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // optional uint32 task_last_date = 2;
  if (has_task_last_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_last_date(), output);
  }

  // optional uint32 bonus_accept = 3;
  if (has_bonus_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bonus_accept(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_task_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // optional uint32 task_last_date = 2;
  if (has_task_last_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_last_date(), target);
  }

  // optional uint32 bonus_accept = 3;
  if (has_bonus_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bonus_accept(), target);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_task_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional uint32 task_last_date = 2;
    if (has_task_last_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_last_date());
    }

    // optional uint32 bonus_accept = 3;
    if (has_bonus_accept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_accept());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_task_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_task_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_task_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_task_t::MergeFrom(const pb_task_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_last_date()) {
      set_task_last_date(from.task_last_date());
    }
    if (from.has_bonus_accept()) {
      set_bonus_accept(from.bonus_accept());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_task_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_task_t::CopyFrom(const pb_task_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_task_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pb_task_t::Swap(pb_task_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(task_last_date_, other->task_last_date_);
    std::swap(bonus_accept_, other->bonus_accept_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_task_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_task_t_descriptor_;
  metadata.reflection = pb_task_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_task_list_t::kTasksFieldNumber;
#endif  // !_MSC_VER

pb_task_list_t::pb_task_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_task_list_t::InitAsDefaultInstance() {
}

pb_task_list_t::pb_task_list_t(const pb_task_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_task_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_task_list_t::~pb_task_list_t() {
  SharedDtor();
}

void pb_task_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_task_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_task_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_task_list_t_descriptor_;
}

const pb_task_list_t& pb_task_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_task_list_t* pb_task_list_t::default_instance_ = NULL;

pb_task_list_t* pb_task_list_t::New() const {
  return new pb_task_list_t;
}

void pb_task_list_t::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_task_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_task_t tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_task_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_task_t tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_task_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_task_t tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_task_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_task_t tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_task_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_task_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_task_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_task_list_t::MergeFrom(const pb_task_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_task_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_task_list_t::CopyFrom(const pb_task_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_task_list_t::IsInitialized() const {

  for (int i = 0; i < tasks_size(); i++) {
    if (!this->tasks(i).IsInitialized()) return false;
  }
  return true;
}

void pb_task_list_t::Swap(pb_task_list_t* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_task_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_task_list_t_descriptor_;
  metadata.reflection = pb_task_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_event_t::kEventIdFieldNumber;
const int pb_event_t::kTypeFieldNumber;
const int pb_event_t::kEventLastDateFieldNumber;
const int pb_event_t::kBonusAcceptFieldNumber;
const int pb_event_t::kCountFieldNumber;
const int pb_event_t::kDoneFieldNumber;
const int pb_event_t::kOpValListFieldNumber;
#endif  // !_MSC_VER

pb_event_t::pb_event_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_event_t::InitAsDefaultInstance() {
  op_val_list_ = const_cast< ::commonproto::pb_event_op_list_t*>(&::commonproto::pb_event_op_list_t::default_instance());
}

pb_event_t::pb_event_t(const pb_event_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_event_t::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  type_ = 1;
  event_last_date_ = 0u;
  bonus_accept_ = 0u;
  count_ = 0u;
  done_ = 0u;
  op_val_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_event_t::~pb_event_t() {
  SharedDtor();
}

void pb_event_t::SharedDtor() {
  if (this != default_instance_) {
    delete op_val_list_;
  }
}

void pb_event_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_event_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_event_t_descriptor_;
}

const pb_event_t& pb_event_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_event_t* pb_event_t::default_instance_ = NULL;

pb_event_t* pb_event_t::New() const {
  return new pb_event_t;
}

void pb_event_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0u;
    type_ = 1;
    event_last_date_ = 0u;
    bonus_accept_ = 0u;
    count_ = 0u;
    done_ = 0u;
    if (has_op_val_list()) {
      if (op_val_list_ != NULL) op_val_list_->::commonproto::pb_event_op_list_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_event_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .commonproto.pb_event_type_t type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonproto::pb_event_type_t_IsValid(value)) {
            set_type(static_cast< ::commonproto::pb_event_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_last_date;
        break;
      }

      // required uint32 event_last_date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_last_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_last_date_)));
          set_has_event_last_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bonus_accept;
        break;
      }

      // required uint32 bonus_accept = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_accept_)));
          set_has_bonus_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // required uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_done;
        break;
      }

      // required uint32 done = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_op_val_list;
        break;
      }

      // optional .commonproto.pb_event_op_list_t op_val_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_val_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_val_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_event_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // required .commonproto.pb_event_type_t type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 event_last_date = 3;
  if (has_event_last_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event_last_date(), output);
  }

  // required uint32 bonus_accept = 4;
  if (has_bonus_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bonus_accept(), output);
  }

  // required uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // required uint32 done = 6;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->done(), output);
  }

  // optional .commonproto.pb_event_op_list_t op_val_list = 7;
  if (has_op_val_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->op_val_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_event_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // required .commonproto.pb_event_type_t type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 event_last_date = 3;
  if (has_event_last_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event_last_date(), target);
  }

  // required uint32 bonus_accept = 4;
  if (has_bonus_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bonus_accept(), target);
  }

  // required uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  // required uint32 done = 6;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->done(), target);
  }

  // optional .commonproto.pb_event_op_list_t op_val_list = 7;
  if (has_op_val_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->op_val_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_event_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // required .commonproto.pb_event_type_t type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 event_last_date = 3;
    if (has_event_last_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_last_date());
    }

    // required uint32 bonus_accept = 4;
    if (has_bonus_accept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_accept());
    }

    // required uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 done = 6;
    if (has_done()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->done());
    }

    // optional .commonproto.pb_event_op_list_t op_val_list = 7;
    if (has_op_val_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_val_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_event_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_event_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_event_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_event_t::MergeFrom(const pb_event_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_event_last_date()) {
      set_event_last_date(from.event_last_date());
    }
    if (from.has_bonus_accept()) {
      set_bonus_accept(from.bonus_accept());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_op_val_list()) {
      mutable_op_val_list()->::commonproto::pb_event_op_list_t::MergeFrom(from.op_val_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_event_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_event_t::CopyFrom(const pb_event_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_event_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_op_val_list()) {
    if (!this->op_val_list().IsInitialized()) return false;
  }
  return true;
}

void pb_event_t::Swap(pb_event_t* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(type_, other->type_);
    std::swap(event_last_date_, other->event_last_date_);
    std::swap(bonus_accept_, other->bonus_accept_);
    std::swap(count_, other->count_);
    std::swap(done_, other->done_);
    std::swap(op_val_list_, other->op_val_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_event_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_event_t_descriptor_;
  metadata.reflection = pb_event_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_event_list_t::kEventsFieldNumber;
#endif  // !_MSC_VER

pb_event_list_t::pb_event_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_event_list_t::InitAsDefaultInstance() {
}

pb_event_list_t::pb_event_list_t(const pb_event_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_event_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_event_list_t::~pb_event_list_t() {
  SharedDtor();
}

void pb_event_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_event_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_event_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_event_list_t_descriptor_;
}

const pb_event_list_t& pb_event_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_event_list_t* pb_event_list_t::default_instance_ = NULL;

pb_event_list_t* pb_event_list_t::New() const {
  return new pb_event_list_t;
}

void pb_event_list_t::Clear() {
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_event_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_event_t events = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_event_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_event_t events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_event_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_event_t events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_event_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_event_t events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_event_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_event_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_event_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_event_list_t::MergeFrom(const pb_event_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_event_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_event_list_t::CopyFrom(const pb_event_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_event_list_t::IsInitialized() const {

  for (int i = 0; i < events_size(); i++) {
    if (!this->events(i).IsInitialized()) return false;
  }
  return true;
}

void pb_event_list_t::Swap(pb_event_list_t* other) {
  if (other != this) {
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_event_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_event_list_t_descriptor_;
  metadata.reflection = pb_event_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_event_idc_t::kEventIdFieldNumber;
const int pb_event_idc_t::kCountFieldNumber;
#endif  // !_MSC_VER

pb_event_idc_t::pb_event_idc_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_event_idc_t::InitAsDefaultInstance() {
}

pb_event_idc_t::pb_event_idc_t(const pb_event_idc_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_event_idc_t::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_event_idc_t::~pb_event_idc_t() {
  SharedDtor();
}

void pb_event_idc_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_event_idc_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_event_idc_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_event_idc_t_descriptor_;
}

const pb_event_idc_t& pb_event_idc_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_event_idc_t* pb_event_idc_t::default_instance_ = NULL;

pb_event_idc_t* pb_event_idc_t::New() const {
  return new pb_event_idc_t;
}

void pb_event_idc_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_event_idc_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_event_idc_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_event_idc_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_event_idc_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_event_idc_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_event_idc_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_event_idc_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_event_idc_t::MergeFrom(const pb_event_idc_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_event_idc_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_event_idc_t::CopyFrom(const pb_event_idc_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_event_idc_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pb_event_idc_t::Swap(pb_event_idc_t* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_event_idc_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_event_idc_t_descriptor_;
  metadata.reflection = pb_event_idc_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_event_idc_list_t::kEvIdcsBounsAcceptFieldNumber;
const int pb_event_idc_list_t::kEvIdcsDoneFieldNumber;
#endif  // !_MSC_VER

pb_event_idc_list_t::pb_event_idc_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_event_idc_list_t::InitAsDefaultInstance() {
}

pb_event_idc_list_t::pb_event_idc_list_t(const pb_event_idc_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_event_idc_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_event_idc_list_t::~pb_event_idc_list_t() {
  SharedDtor();
}

void pb_event_idc_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_event_idc_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_event_idc_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_event_idc_list_t_descriptor_;
}

const pb_event_idc_list_t& pb_event_idc_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_event_idc_list_t* pb_event_idc_list_t::default_instance_ = NULL;

pb_event_idc_list_t* pb_event_idc_list_t::New() const {
  return new pb_event_idc_list_t;
}

void pb_event_idc_list_t::Clear() {
  ev_idcs_bouns_accept_.Clear();
  ev_idcs_done_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_event_idc_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_event_idc_t ev_idcs_bouns_accept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ev_idcs_bouns_accept:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ev_idcs_bouns_accept()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ev_idcs_bouns_accept;
        if (input->ExpectTag(18)) goto parse_ev_idcs_done;
        break;
      }

      // repeated .commonproto.pb_event_idc_t ev_idcs_done = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ev_idcs_done:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ev_idcs_done()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ev_idcs_done;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_event_idc_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_event_idc_t ev_idcs_bouns_accept = 1;
  for (int i = 0; i < this->ev_idcs_bouns_accept_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ev_idcs_bouns_accept(i), output);
  }

  // repeated .commonproto.pb_event_idc_t ev_idcs_done = 2;
  for (int i = 0; i < this->ev_idcs_done_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ev_idcs_done(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_event_idc_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_event_idc_t ev_idcs_bouns_accept = 1;
  for (int i = 0; i < this->ev_idcs_bouns_accept_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ev_idcs_bouns_accept(i), target);
  }

  // repeated .commonproto.pb_event_idc_t ev_idcs_done = 2;
  for (int i = 0; i < this->ev_idcs_done_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ev_idcs_done(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_event_idc_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_event_idc_t ev_idcs_bouns_accept = 1;
  total_size += 1 * this->ev_idcs_bouns_accept_size();
  for (int i = 0; i < this->ev_idcs_bouns_accept_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ev_idcs_bouns_accept(i));
  }

  // repeated .commonproto.pb_event_idc_t ev_idcs_done = 2;
  total_size += 1 * this->ev_idcs_done_size();
  for (int i = 0; i < this->ev_idcs_done_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ev_idcs_done(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_event_idc_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_event_idc_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_event_idc_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_event_idc_list_t::MergeFrom(const pb_event_idc_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  ev_idcs_bouns_accept_.MergeFrom(from.ev_idcs_bouns_accept_);
  ev_idcs_done_.MergeFrom(from.ev_idcs_done_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_event_idc_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_event_idc_list_t::CopyFrom(const pb_event_idc_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_event_idc_list_t::IsInitialized() const {

  for (int i = 0; i < ev_idcs_bouns_accept_size(); i++) {
    if (!this->ev_idcs_bouns_accept(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ev_idcs_done_size(); i++) {
    if (!this->ev_idcs_done(i).IsInitialized()) return false;
  }
  return true;
}

void pb_event_idc_list_t::Swap(pb_event_idc_list_t* other) {
  if (other != this) {
    ev_idcs_bouns_accept_.Swap(&other->ev_idcs_bouns_accept_);
    ev_idcs_done_.Swap(&other->ev_idcs_done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_event_idc_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_event_idc_list_t_descriptor_;
  metadata.reflection = pb_event_idc_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_event_op_t::kHeroIdFieldNumber;
const int pb_event_op_t::kValFieldNumber;
#endif  // !_MSC_VER

pb_event_op_t::pb_event_op_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_event_op_t::InitAsDefaultInstance() {
}

pb_event_op_t::pb_event_op_t(const pb_event_op_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_event_op_t::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_event_op_t::~pb_event_op_t() {
  SharedDtor();
}

void pb_event_op_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_event_op_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_event_op_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_event_op_t_descriptor_;
}

const pb_event_op_t& pb_event_op_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_event_op_t* pb_event_op_t::default_instance_ = NULL;

pb_event_op_t* pb_event_op_t::New() const {
  return new pb_event_op_t;
}

void pb_event_op_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_event_op_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // required uint32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_event_op_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_event_op_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_event_op_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_event_op_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_event_op_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_event_op_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_event_op_t::MergeFrom(const pb_event_op_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_event_op_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_event_op_t::CopyFrom(const pb_event_op_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_event_op_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pb_event_op_t::Swap(pb_event_op_t* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_event_op_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_event_op_t_descriptor_;
  metadata.reflection = pb_event_op_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_event_op_list_t::kEventOpFieldNumber;
#endif  // !_MSC_VER

pb_event_op_list_t::pb_event_op_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_event_op_list_t::InitAsDefaultInstance() {
}

pb_event_op_list_t::pb_event_op_list_t(const pb_event_op_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_event_op_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_event_op_list_t::~pb_event_op_list_t() {
  SharedDtor();
}

void pb_event_op_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_event_op_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_event_op_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_event_op_list_t_descriptor_;
}

const pb_event_op_list_t& pb_event_op_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_event_op_list_t* pb_event_op_list_t::default_instance_ = NULL;

pb_event_op_list_t* pb_event_op_list_t::New() const {
  return new pb_event_op_list_t;
}

void pb_event_op_list_t::Clear() {
  event_op_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_event_op_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_event_op_t event_op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_op()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event_op;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_event_op_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_event_op_t event_op = 1;
  for (int i = 0; i < this->event_op_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event_op(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_event_op_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_event_op_t event_op = 1;
  for (int i = 0; i < this->event_op_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event_op(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_event_op_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_event_op_t event_op = 1;
  total_size += 1 * this->event_op_size();
  for (int i = 0; i < this->event_op_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_op(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_event_op_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_event_op_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_event_op_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_event_op_list_t::MergeFrom(const pb_event_op_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_op_.MergeFrom(from.event_op_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_event_op_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_event_op_list_t::CopyFrom(const pb_event_op_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_event_op_list_t::IsInitialized() const {

  for (int i = 0; i < event_op_size(); i++) {
    if (!this->event_op(i).IsInitialized()) return false;
  }
  return true;
}

void pb_event_op_list_t::Swap(pb_event_op_list_t* other) {
  if (other != this) {
    event_op_.Swap(&other->event_op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_event_op_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_event_op_list_t_descriptor_;
  metadata.reflection = pb_event_op_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_money_t::kTypeFieldNumber;
const int pb_money_t::kCountFieldNumber;
#endif  // !_MSC_VER

pb_money_t::pb_money_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_money_t::InitAsDefaultInstance() {
}

pb_money_t::pb_money_t(const pb_money_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_money_t::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_money_t::~pb_money_t() {
  SharedDtor();
}

void pb_money_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_money_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_money_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_money_t_descriptor_;
}

const pb_money_t& pb_money_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_money_t* pb_money_t::default_instance_ = NULL;

pb_money_t* pb_money_t::New() const {
  return new pb_money_t;
}

void pb_money_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_money_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .commonproto.pb_money_type_t type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::commonproto::pb_money_type_t_IsValid(value)) {
            set_type(static_cast< ::commonproto::pb_money_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_money_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .commonproto.pb_money_type_t type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_money_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .commonproto.pb_money_type_t type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_money_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .commonproto.pb_money_type_t type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_money_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_money_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_money_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_money_t::MergeFrom(const pb_money_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_money_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_money_t::CopyFrom(const pb_money_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_money_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pb_money_t::Swap(pb_money_t* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_money_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_money_t_descriptor_;
  metadata.reflection = pb_money_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_attachment_t::kItemListFieldNumber;
const int pb_attachment_t::kMoneysFieldNumber;
#endif  // !_MSC_VER

pb_attachment_t::pb_attachment_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_attachment_t::InitAsDefaultInstance() {
  item_list_ = const_cast< ::commonproto::pb_item_list_t*>(&::commonproto::pb_item_list_t::default_instance());
}

pb_attachment_t::pb_attachment_t(const pb_attachment_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_attachment_t::SharedCtor() {
  _cached_size_ = 0;
  item_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_attachment_t::~pb_attachment_t() {
  SharedDtor();
}

void pb_attachment_t::SharedDtor() {
  if (this != default_instance_) {
    delete item_list_;
  }
}

void pb_attachment_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_attachment_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_attachment_t_descriptor_;
}

const pb_attachment_t& pb_attachment_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_attachment_t* pb_attachment_t::default_instance_ = NULL;

pb_attachment_t* pb_attachment_t::New() const {
  return new pb_attachment_t;
}

void pb_attachment_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item_list()) {
      if (item_list_ != NULL) item_list_->::commonproto::pb_item_list_t::Clear();
    }
  }
  moneys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_attachment_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .commonproto.pb_item_list_t item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_moneys;
        break;
      }

      // repeated .commonproto.pb_money_t moneys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moneys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moneys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_moneys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_attachment_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .commonproto.pb_item_list_t item_list = 1;
  if (has_item_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(), output);
  }

  // repeated .commonproto.pb_money_t moneys = 2;
  for (int i = 0; i < this->moneys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->moneys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_attachment_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .commonproto.pb_item_list_t item_list = 1;
  if (has_item_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(), target);
  }

  // repeated .commonproto.pb_money_t moneys = 2;
  for (int i = 0; i < this->moneys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->moneys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_attachment_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .commonproto.pb_item_list_t item_list = 1;
    if (has_item_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list());
    }

  }
  // repeated .commonproto.pb_money_t moneys = 2;
  total_size += 1 * this->moneys_size();
  for (int i = 0; i < this->moneys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moneys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_attachment_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_attachment_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_attachment_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_attachment_t::MergeFrom(const pb_attachment_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  moneys_.MergeFrom(from.moneys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_list()) {
      mutable_item_list()->::commonproto::pb_item_list_t::MergeFrom(from.item_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_attachment_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_attachment_t::CopyFrom(const pb_attachment_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_attachment_t::IsInitialized() const {

  if (has_item_list()) {
    if (!this->item_list().IsInitialized()) return false;
  }
  for (int i = 0; i < moneys_size(); i++) {
    if (!this->moneys(i).IsInitialized()) return false;
  }
  return true;
}

void pb_attachment_t::Swap(pb_attachment_t* other) {
  if (other != this) {
    std::swap(item_list_, other->item_list_);
    moneys_.Swap(&other->moneys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_attachment_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_attachment_t_descriptor_;
  metadata.reflection = pb_attachment_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_mail_t::kMailIdFieldNumber;
const int pb_mail_t::kTitleFieldNumber;
const int pb_mail_t::kSenderFieldNumber;
const int pb_mail_t::kContentFieldNumber;
const int pb_mail_t::kTimestampFieldNumber;
const int pb_mail_t::kReadMarkFieldNumber;
const int pb_mail_t::kAttachmentFieldNumber;
#endif  // !_MSC_VER

pb_mail_t::pb_mail_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_mail_t::InitAsDefaultInstance() {
  attachment_ = const_cast< ::commonproto::pb_attachment_t*>(&::commonproto::pb_attachment_t::default_instance());
}

pb_mail_t::pb_mail_t(const pb_mail_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_mail_t::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = 0u;
  read_mark_ = 0u;
  attachment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_mail_t::~pb_mail_t() {
  SharedDtor();
}

void pb_mail_t::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete attachment_;
  }
}

void pb_mail_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_mail_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_mail_t_descriptor_;
}

const pb_mail_t& pb_mail_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_mail_t* pb_mail_t::default_instance_ = NULL;

pb_mail_t* pb_mail_t::New() const {
  return new pb_mail_t;
}

void pb_mail_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    timestamp_ = 0u;
    read_mark_ = 0u;
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::commonproto::pb_attachment_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_mail_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // required string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender;
        break;
      }

      // required string sender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // required uint32 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_read_mark;
        break;
      }

      // required uint32 read_mark = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &read_mark_)));
          set_has_read_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attachment;
        break;
      }

      // optional .commonproto.pb_attachment_t attachment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_mail_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // required string sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sender(), output);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // required uint32 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp(), output);
  }

  // required uint32 read_mark = 6;
  if (has_read_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->read_mark(), output);
  }

  // optional .commonproto.pb_attachment_t attachment = 7;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attachment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_mail_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required string sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender(), target);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // required uint32 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp(), target);
  }

  // required uint32 read_mark = 6;
  if (has_read_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->read_mark(), target);
  }

  // optional .commonproto.pb_attachment_t attachment = 7;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attachment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_mail_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // required string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required uint32 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required uint32 read_mark = 6;
    if (has_read_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->read_mark());
    }

    // optional .commonproto.pb_attachment_t attachment = 7;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_mail_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_mail_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_mail_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_mail_t::MergeFrom(const pb_mail_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_read_mark()) {
      set_read_mark(from.read_mark());
    }
    if (from.has_attachment()) {
      mutable_attachment()->::commonproto::pb_attachment_t::MergeFrom(from.attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_mail_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_mail_t::CopyFrom(const pb_mail_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_mail_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  return true;
}

void pb_mail_t::Swap(pb_mail_t* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(title_, other->title_);
    std::swap(sender_, other->sender_);
    std::swap(content_, other->content_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(read_mark_, other->read_mark_);
    std::swap(attachment_, other->attachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_mail_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_mail_t_descriptor_;
  metadata.reflection = pb_mail_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_mail_list_t::kMailsFieldNumber;
#endif  // !_MSC_VER

pb_mail_list_t::pb_mail_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_mail_list_t::InitAsDefaultInstance() {
}

pb_mail_list_t::pb_mail_list_t(const pb_mail_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_mail_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_mail_list_t::~pb_mail_list_t() {
  SharedDtor();
}

void pb_mail_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_mail_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_mail_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_mail_list_t_descriptor_;
}

const pb_mail_list_t& pb_mail_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_mail_list_t* pb_mail_list_t::default_instance_ = NULL;

pb_mail_list_t* pb_mail_list_t::New() const {
  return new pb_mail_list_t;
}

void pb_mail_list_t::Clear() {
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_mail_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_mail_t mails = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_mail_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_mail_t mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_mail_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_mail_t mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_mail_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_mail_t mails = 1;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_mail_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_mail_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_mail_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_mail_list_t::MergeFrom(const pb_mail_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_mail_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_mail_list_t::CopyFrom(const pb_mail_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_mail_list_t::IsInitialized() const {

  for (int i = 0; i < mails_size(); i++) {
    if (!this->mails(i).IsInitialized()) return false;
  }
  return true;
}

void pb_mail_list_t::Swap(pb_mail_list_t* other) {
  if (other != this) {
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_mail_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_mail_list_t_descriptor_;
  metadata.reflection = pb_mail_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_challenge_player_t::kUidFieldNumber;
const int pb_challenge_player_t::kNickFieldNumber;
const int pb_challenge_player_t::kLvFieldNumber;
const int pb_challenge_player_t::kBtlValFieldNumber;
const int pb_challenge_player_t::kWinCountFieldNumber;
const int pb_challenge_player_t::kRankFieldNumber;
const int pb_challenge_player_t::kChalHeroFieldNumber;
#endif  // !_MSC_VER

pb_challenge_player_t::pb_challenge_player_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_challenge_player_t::InitAsDefaultInstance() {
}

pb_challenge_player_t::pb_challenge_player_t(const pb_challenge_player_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_challenge_player_t::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  btl_val_ = 0u;
  win_count_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_challenge_player_t::~pb_challenge_player_t() {
  SharedDtor();
}

void pb_challenge_player_t::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (this != default_instance_) {
  }
}

void pb_challenge_player_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_challenge_player_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_challenge_player_t_descriptor_;
}

const pb_challenge_player_t& pb_challenge_player_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_challenge_player_t* pb_challenge_player_t::default_instance_ = NULL;

pb_challenge_player_t* pb_challenge_player_t::New() const {
  return new pb_challenge_player_t;
}

void pb_challenge_player_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    lv_ = 0u;
    btl_val_ = 0u;
    win_count_ = 0u;
    rank_ = 0u;
  }
  chal_hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_challenge_player_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick;
        break;
      }

      // required string nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // required uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_btl_val;
        break;
      }

      // required uint32 btl_val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btl_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &btl_val_)));
          set_has_btl_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_count;
        break;
      }

      // required uint32 win_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }

      // required uint32 rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chal_hero;
        break;
      }

      // repeated .commonproto.pb_hero_t chal_hero = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chal_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chal_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chal_hero;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_challenge_player_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }

  // required uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // required uint32 btl_val = 4;
  if (has_btl_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->btl_val(), output);
  }

  // required uint32 win_count = 5;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->win_count(), output);
  }

  // required uint32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank(), output);
  }

  // repeated .commonproto.pb_hero_t chal_hero = 7;
  for (int i = 0; i < this->chal_hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chal_hero(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_challenge_player_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }

  // required uint32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // required uint32 btl_val = 4;
  if (has_btl_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->btl_val(), target);
  }

  // required uint32 win_count = 5;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->win_count(), target);
  }

  // required uint32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rank(), target);
  }

  // repeated .commonproto.pb_hero_t chal_hero = 7;
  for (int i = 0; i < this->chal_hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chal_hero(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_challenge_player_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // required uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 btl_val = 4;
    if (has_btl_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->btl_val());
    }

    // required uint32 win_count = 5;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_count());
    }

    // required uint32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  // repeated .commonproto.pb_hero_t chal_hero = 7;
  total_size += 1 * this->chal_hero_size();
  for (int i = 0; i < this->chal_hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chal_hero(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_challenge_player_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_challenge_player_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_challenge_player_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_challenge_player_t::MergeFrom(const pb_challenge_player_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  chal_hero_.MergeFrom(from.chal_hero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_btl_val()) {
      set_btl_val(from.btl_val());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_challenge_player_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_challenge_player_t::CopyFrom(const pb_challenge_player_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_challenge_player_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < chal_hero_size(); i++) {
    if (!this->chal_hero(i).IsInitialized()) return false;
  }
  return true;
}

void pb_challenge_player_t::Swap(pb_challenge_player_t* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(nick_, other->nick_);
    std::swap(lv_, other->lv_);
    std::swap(btl_val_, other->btl_val_);
    std::swap(win_count_, other->win_count_);
    std::swap(rank_, other->rank_);
    chal_hero_.Swap(&other->chal_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_challenge_player_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_challenge_player_t_descriptor_;
  metadata.reflection = pb_challenge_player_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_challenge_list_t::kChallengePlayerFieldNumber;
#endif  // !_MSC_VER

pb_challenge_list_t::pb_challenge_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_challenge_list_t::InitAsDefaultInstance() {
}

pb_challenge_list_t::pb_challenge_list_t(const pb_challenge_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_challenge_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_challenge_list_t::~pb_challenge_list_t() {
  SharedDtor();
}

void pb_challenge_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_challenge_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_challenge_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_challenge_list_t_descriptor_;
}

const pb_challenge_list_t& pb_challenge_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_challenge_list_t* pb_challenge_list_t::default_instance_ = NULL;

pb_challenge_list_t* pb_challenge_list_t::New() const {
  return new pb_challenge_list_t;
}

void pb_challenge_list_t::Clear() {
  challenge_player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_challenge_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_challenge_player_t challenge_player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenge_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenge_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_challenge_player;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_challenge_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_challenge_player_t challenge_player = 1;
  for (int i = 0; i < this->challenge_player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->challenge_player(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_challenge_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_challenge_player_t challenge_player = 1;
  for (int i = 0; i < this->challenge_player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->challenge_player(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_challenge_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_challenge_player_t challenge_player = 1;
  total_size += 1 * this->challenge_player_size();
  for (int i = 0; i < this->challenge_player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->challenge_player(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_challenge_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_challenge_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_challenge_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_challenge_list_t::MergeFrom(const pb_challenge_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  challenge_player_.MergeFrom(from.challenge_player_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_challenge_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_challenge_list_t::CopyFrom(const pb_challenge_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_challenge_list_t::IsInitialized() const {

  for (int i = 0; i < challenge_player_size(); i++) {
    if (!this->challenge_player(i).IsInitialized()) return false;
  }
  return true;
}

void pb_challenge_list_t::Swap(pb_challenge_list_t* other) {
  if (other != this) {
    challenge_player_.Swap(&other->challenge_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_challenge_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_challenge_list_t_descriptor_;
  metadata.reflection = pb_challenge_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_exped_opponent_t::kChlPlayerFieldNumber;
#endif  // !_MSC_VER

pb_exped_opponent_t::pb_exped_opponent_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_exped_opponent_t::InitAsDefaultInstance() {
  chl_player_ = const_cast< ::commonproto::pb_challenge_player_t*>(&::commonproto::pb_challenge_player_t::default_instance());
}

pb_exped_opponent_t::pb_exped_opponent_t(const pb_exped_opponent_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_exped_opponent_t::SharedCtor() {
  _cached_size_ = 0;
  chl_player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_exped_opponent_t::~pb_exped_opponent_t() {
  SharedDtor();
}

void pb_exped_opponent_t::SharedDtor() {
  if (this != default_instance_) {
    delete chl_player_;
  }
}

void pb_exped_opponent_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_exped_opponent_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_exped_opponent_t_descriptor_;
}

const pb_exped_opponent_t& pb_exped_opponent_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_exped_opponent_t* pb_exped_opponent_t::default_instance_ = NULL;

pb_exped_opponent_t* pb_exped_opponent_t::New() const {
  return new pb_exped_opponent_t;
}

void pb_exped_opponent_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chl_player()) {
      if (chl_player_ != NULL) chl_player_->::commonproto::pb_challenge_player_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_exped_opponent_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .commonproto.pb_challenge_player_t chl_player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chl_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_exped_opponent_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .commonproto.pb_challenge_player_t chl_player = 1;
  if (has_chl_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chl_player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_exped_opponent_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .commonproto.pb_challenge_player_t chl_player = 1;
  if (has_chl_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chl_player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_exped_opponent_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .commonproto.pb_challenge_player_t chl_player = 1;
    if (has_chl_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chl_player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_exped_opponent_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_exped_opponent_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_exped_opponent_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_exped_opponent_t::MergeFrom(const pb_exped_opponent_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chl_player()) {
      mutable_chl_player()->::commonproto::pb_challenge_player_t::MergeFrom(from.chl_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_exped_opponent_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_exped_opponent_t::CopyFrom(const pb_exped_opponent_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_exped_opponent_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_chl_player()) {
    if (!this->chl_player().IsInitialized()) return false;
  }
  return true;
}

void pb_exped_opponent_t::Swap(pb_exped_opponent_t* other) {
  if (other != this) {
    std::swap(chl_player_, other->chl_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_exped_opponent_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_exped_opponent_t_descriptor_;
  metadata.reflection = pb_exped_opponent_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_exped_opponent_list_t::kExpedOpponentsFieldNumber;
#endif  // !_MSC_VER

pb_exped_opponent_list_t::pb_exped_opponent_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_exped_opponent_list_t::InitAsDefaultInstance() {
}

pb_exped_opponent_list_t::pb_exped_opponent_list_t(const pb_exped_opponent_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_exped_opponent_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_exped_opponent_list_t::~pb_exped_opponent_list_t() {
  SharedDtor();
}

void pb_exped_opponent_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_exped_opponent_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_exped_opponent_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_exped_opponent_list_t_descriptor_;
}

const pb_exped_opponent_list_t& pb_exped_opponent_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_exped_opponent_list_t* pb_exped_opponent_list_t::default_instance_ = NULL;

pb_exped_opponent_list_t* pb_exped_opponent_list_t::New() const {
  return new pb_exped_opponent_list_t;
}

void pb_exped_opponent_list_t::Clear() {
  exped_opponents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_exped_opponent_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_exped_opponent_t exped_opponents = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exped_opponents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exped_opponents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_exped_opponents;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_exped_opponent_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_exped_opponent_t exped_opponents = 1;
  for (int i = 0; i < this->exped_opponents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exped_opponents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_exped_opponent_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_exped_opponent_t exped_opponents = 1;
  for (int i = 0; i < this->exped_opponents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->exped_opponents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_exped_opponent_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_exped_opponent_t exped_opponents = 1;
  total_size += 1 * this->exped_opponents_size();
  for (int i = 0; i < this->exped_opponents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exped_opponents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_exped_opponent_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_exped_opponent_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_exped_opponent_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_exped_opponent_list_t::MergeFrom(const pb_exped_opponent_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  exped_opponents_.MergeFrom(from.exped_opponents_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_exped_opponent_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_exped_opponent_list_t::CopyFrom(const pb_exped_opponent_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_exped_opponent_list_t::IsInitialized() const {

  for (int i = 0; i < exped_opponents_size(); i++) {
    if (!this->exped_opponents(i).IsInitialized()) return false;
  }
  return true;
}

void pb_exped_opponent_list_t::Swap(pb_exped_opponent_list_t* other) {
  if (other != this) {
    exped_opponents_.Swap(&other->exped_opponents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_exped_opponent_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_exped_opponent_list_t_descriptor_;
  metadata.reflection = pb_exped_opponent_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_arena_history_entry_t::kChallengePlayerFieldNumber;
const int pb_arena_history_entry_t::kBSuccessFieldNumber;
#endif  // !_MSC_VER

pb_arena_history_entry_t::pb_arena_history_entry_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_arena_history_entry_t::InitAsDefaultInstance() {
  challenge_player_ = const_cast< ::commonproto::pb_challenge_player_t*>(&::commonproto::pb_challenge_player_t::default_instance());
}

pb_arena_history_entry_t::pb_arena_history_entry_t(const pb_arena_history_entry_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_arena_history_entry_t::SharedCtor() {
  _cached_size_ = 0;
  challenge_player_ = NULL;
  b_success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_arena_history_entry_t::~pb_arena_history_entry_t() {
  SharedDtor();
}

void pb_arena_history_entry_t::SharedDtor() {
  if (this != default_instance_) {
    delete challenge_player_;
  }
}

void pb_arena_history_entry_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_arena_history_entry_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_arena_history_entry_t_descriptor_;
}

const pb_arena_history_entry_t& pb_arena_history_entry_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_arena_history_entry_t* pb_arena_history_entry_t::default_instance_ = NULL;

pb_arena_history_entry_t* pb_arena_history_entry_t::New() const {
  return new pb_arena_history_entry_t;
}

void pb_arena_history_entry_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_challenge_player()) {
      if (challenge_player_ != NULL) challenge_player_->::commonproto::pb_challenge_player_t::Clear();
    }
    b_success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_arena_history_entry_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .commonproto.pb_challenge_player_t challenge_player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenge_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_b_success;
        break;
      }

      // required bool b_success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_success_)));
          set_has_b_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_arena_history_entry_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .commonproto.pb_challenge_player_t challenge_player = 1;
  if (has_challenge_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->challenge_player(), output);
  }

  // required bool b_success = 2;
  if (has_b_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->b_success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_arena_history_entry_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .commonproto.pb_challenge_player_t challenge_player = 1;
  if (has_challenge_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->challenge_player(), target);
  }

  // required bool b_success = 2;
  if (has_b_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->b_success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_arena_history_entry_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .commonproto.pb_challenge_player_t challenge_player = 1;
    if (has_challenge_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challenge_player());
    }

    // required bool b_success = 2;
    if (has_b_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_arena_history_entry_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_arena_history_entry_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_arena_history_entry_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_arena_history_entry_t::MergeFrom(const pb_arena_history_entry_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challenge_player()) {
      mutable_challenge_player()->::commonproto::pb_challenge_player_t::MergeFrom(from.challenge_player());
    }
    if (from.has_b_success()) {
      set_b_success(from.b_success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_arena_history_entry_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_arena_history_entry_t::CopyFrom(const pb_arena_history_entry_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_arena_history_entry_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_challenge_player()) {
    if (!this->challenge_player().IsInitialized()) return false;
  }
  return true;
}

void pb_arena_history_entry_t::Swap(pb_arena_history_entry_t* other) {
  if (other != this) {
    std::swap(challenge_player_, other->challenge_player_);
    std::swap(b_success_, other->b_success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_arena_history_entry_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_arena_history_entry_t_descriptor_;
  metadata.reflection = pb_arena_history_entry_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_exped_history_entry_t::kOpponUidFieldNumber;
const int pb_exped_history_entry_t::kOpponNickFieldNumber;
#endif  // !_MSC_VER

pb_exped_history_entry_t::pb_exped_history_entry_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_exped_history_entry_t::InitAsDefaultInstance() {
}

pb_exped_history_entry_t::pb_exped_history_entry_t(const pb_exped_history_entry_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_exped_history_entry_t::SharedCtor() {
  _cached_size_ = 0;
  oppon_uid_ = 0u;
  oppon_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_exped_history_entry_t::~pb_exped_history_entry_t() {
  SharedDtor();
}

void pb_exped_history_entry_t::SharedDtor() {
  if (oppon_nick_ != &::google::protobuf::internal::kEmptyString) {
    delete oppon_nick_;
  }
  if (this != default_instance_) {
  }
}

void pb_exped_history_entry_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_exped_history_entry_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_exped_history_entry_t_descriptor_;
}

const pb_exped_history_entry_t& pb_exped_history_entry_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_exped_history_entry_t* pb_exped_history_entry_t::default_instance_ = NULL;

pb_exped_history_entry_t* pb_exped_history_entry_t::New() const {
  return new pb_exped_history_entry_t;
}

void pb_exped_history_entry_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oppon_uid_ = 0u;
    if (has_oppon_nick()) {
      if (oppon_nick_ != &::google::protobuf::internal::kEmptyString) {
        oppon_nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_exped_history_entry_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oppon_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oppon_uid_)));
          set_has_oppon_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oppon_nick;
        break;
      }

      // required string oppon_nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oppon_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oppon_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oppon_nick().data(), this->oppon_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_exped_history_entry_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 oppon_uid = 1;
  if (has_oppon_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oppon_uid(), output);
  }

  // required string oppon_nick = 2;
  if (has_oppon_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oppon_nick().data(), this->oppon_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->oppon_nick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_exped_history_entry_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oppon_uid = 1;
  if (has_oppon_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oppon_uid(), target);
  }

  // required string oppon_nick = 2;
  if (has_oppon_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oppon_nick().data(), this->oppon_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->oppon_nick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_exped_history_entry_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oppon_uid = 1;
    if (has_oppon_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oppon_uid());
    }

    // required string oppon_nick = 2;
    if (has_oppon_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oppon_nick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_exped_history_entry_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_exped_history_entry_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_exped_history_entry_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_exped_history_entry_t::MergeFrom(const pb_exped_history_entry_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oppon_uid()) {
      set_oppon_uid(from.oppon_uid());
    }
    if (from.has_oppon_nick()) {
      set_oppon_nick(from.oppon_nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_exped_history_entry_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_exped_history_entry_t::CopyFrom(const pb_exped_history_entry_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_exped_history_entry_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pb_exped_history_entry_t::Swap(pb_exped_history_entry_t* other) {
  if (other != this) {
    std::swap(oppon_uid_, other->oppon_uid_);
    std::swap(oppon_nick_, other->oppon_nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_exped_history_entry_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_exped_history_entry_t_descriptor_;
  metadata.reflection = pb_exped_history_entry_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_exped_survive_hero_t::kHeroIdFieldNumber;
const int pb_exped_survive_hero_t::kHeroHpFieldNumber;
const int pb_exped_survive_hero_t::kHeroCdFieldNumber;
const int pb_exped_survive_hero_t::kBDeadFieldNumber;
#endif  // !_MSC_VER

pb_exped_survive_hero_t::pb_exped_survive_hero_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_exped_survive_hero_t::InitAsDefaultInstance() {
}

pb_exped_survive_hero_t::pb_exped_survive_hero_t(const pb_exped_survive_hero_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_exped_survive_hero_t::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  hero_hp_ = 0u;
  hero_cd_ = 0u;
  b_dead_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_exped_survive_hero_t::~pb_exped_survive_hero_t() {
  SharedDtor();
}

void pb_exped_survive_hero_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_exped_survive_hero_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_exped_survive_hero_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_exped_survive_hero_t_descriptor_;
}

const pb_exped_survive_hero_t& pb_exped_survive_hero_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_exped_survive_hero_t* pb_exped_survive_hero_t::default_instance_ = NULL;

pb_exped_survive_hero_t* pb_exped_survive_hero_t::New() const {
  return new pb_exped_survive_hero_t;
}

void pb_exped_survive_hero_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    hero_hp_ = 0u;
    hero_cd_ = 0u;
    b_dead_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_exped_survive_hero_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_hp;
        break;
      }

      // required uint32 hero_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_hp_)));
          set_has_hero_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_cd;
        break;
      }

      // required uint32 hero_cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_cd_)));
          set_has_hero_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_b_dead;
        break;
      }

      // required bool b_dead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_dead_)));
          set_has_b_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_exped_survive_hero_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 hero_hp = 2;
  if (has_hero_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_hp(), output);
  }

  // required uint32 hero_cd = 3;
  if (has_hero_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_cd(), output);
  }

  // required bool b_dead = 4;
  if (has_b_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->b_dead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_exped_survive_hero_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 hero_hp = 2;
  if (has_hero_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_hp(), target);
  }

  // required uint32 hero_cd = 3;
  if (has_hero_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_cd(), target);
  }

  // required bool b_dead = 4;
  if (has_b_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->b_dead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_exped_survive_hero_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 hero_hp = 2;
    if (has_hero_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_hp());
    }

    // required uint32 hero_cd = 3;
    if (has_hero_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_cd());
    }

    // required bool b_dead = 4;
    if (has_b_dead()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_exped_survive_hero_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_exped_survive_hero_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_exped_survive_hero_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_exped_survive_hero_t::MergeFrom(const pb_exped_survive_hero_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_hp()) {
      set_hero_hp(from.hero_hp());
    }
    if (from.has_hero_cd()) {
      set_hero_cd(from.hero_cd());
    }
    if (from.has_b_dead()) {
      set_b_dead(from.b_dead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_exped_survive_hero_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_exped_survive_hero_t::CopyFrom(const pb_exped_survive_hero_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_exped_survive_hero_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void pb_exped_survive_hero_t::Swap(pb_exped_survive_hero_t* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_hp_, other->hero_hp_);
    std::swap(hero_cd_, other->hero_cd_);
    std::swap(b_dead_, other->b_dead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_exped_survive_hero_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_exped_survive_hero_t_descriptor_;
  metadata.reflection = pb_exped_survive_hero_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_exped_survive_hero_list_t::kSurviveHeroFieldNumber;
#endif  // !_MSC_VER

pb_exped_survive_hero_list_t::pb_exped_survive_hero_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_exped_survive_hero_list_t::InitAsDefaultInstance() {
}

pb_exped_survive_hero_list_t::pb_exped_survive_hero_list_t(const pb_exped_survive_hero_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_exped_survive_hero_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_exped_survive_hero_list_t::~pb_exped_survive_hero_list_t() {
  SharedDtor();
}

void pb_exped_survive_hero_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_exped_survive_hero_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_exped_survive_hero_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_exped_survive_hero_list_t_descriptor_;
}

const pb_exped_survive_hero_list_t& pb_exped_survive_hero_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_exped_survive_hero_list_t* pb_exped_survive_hero_list_t::default_instance_ = NULL;

pb_exped_survive_hero_list_t* pb_exped_survive_hero_list_t::New() const {
  return new pb_exped_survive_hero_list_t;
}

void pb_exped_survive_hero_list_t::Clear() {
  survive_hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_exped_survive_hero_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_exped_survive_hero_t survive_hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_survive_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_survive_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_survive_hero;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_exped_survive_hero_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_exped_survive_hero_t survive_hero = 1;
  for (int i = 0; i < this->survive_hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->survive_hero(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_exped_survive_hero_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_exped_survive_hero_t survive_hero = 1;
  for (int i = 0; i < this->survive_hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->survive_hero(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_exped_survive_hero_list_t::ByteSize() const {
  int total_size = 0;

  // repeated .commonproto.pb_exped_survive_hero_t survive_hero = 1;
  total_size += 1 * this->survive_hero_size();
  for (int i = 0; i < this->survive_hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->survive_hero(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_exped_survive_hero_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_exped_survive_hero_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_exped_survive_hero_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_exped_survive_hero_list_t::MergeFrom(const pb_exped_survive_hero_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  survive_hero_.MergeFrom(from.survive_hero_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_exped_survive_hero_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_exped_survive_hero_list_t::CopyFrom(const pb_exped_survive_hero_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_exped_survive_hero_list_t::IsInitialized() const {

  for (int i = 0; i < survive_hero_size(); i++) {
    if (!this->survive_hero(i).IsInitialized()) return false;
  }
  return true;
}

void pb_exped_survive_hero_list_t::Swap(pb_exped_survive_hero_list_t* other) {
  if (other != this) {
    survive_hero_.Swap(&other->survive_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_exped_survive_hero_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_exped_survive_hero_list_t_descriptor_;
  metadata.reflection = pb_exped_survive_hero_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_rank_player_t::kNickFieldNumber;
const int pb_rank_player_t::kTotalStarsFieldNumber;
const int pb_rank_player_t::kUnionNameFieldNumber;
const int pb_rank_player_t::kUidFieldNumber;
const int pb_rank_player_t::kTop4BtlValFieldNumber;
const int pb_rank_player_t::kTotalBtlValFieldNumber;
#endif  // !_MSC_VER

pb_rank_player_t::pb_rank_player_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_rank_player_t::InitAsDefaultInstance() {
}

pb_rank_player_t::pb_rank_player_t(const pb_rank_player_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_rank_player_t::SharedCtor() {
  _cached_size_ = 0;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_stars_ = 0u;
  union_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0u;
  top4_btl_val_ = 0u;
  total_btl_val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_rank_player_t::~pb_rank_player_t() {
  SharedDtor();
}

void pb_rank_player_t::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (union_name_ != &::google::protobuf::internal::kEmptyString) {
    delete union_name_;
  }
  if (this != default_instance_) {
  }
}

void pb_rank_player_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_rank_player_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_rank_player_t_descriptor_;
}

const pb_rank_player_t& pb_rank_player_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_rank_player_t* pb_rank_player_t::default_instance_ = NULL;

pb_rank_player_t* pb_rank_player_t::New() const {
  return new pb_rank_player_t;
}

void pb_rank_player_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    total_stars_ = 0u;
    if (has_union_name()) {
      if (union_name_ != &::google::protobuf::internal::kEmptyString) {
        union_name_->clear();
      }
    }
    uid_ = 0u;
    top4_btl_val_ = 0u;
    total_btl_val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_rank_player_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_stars;
        break;
      }

      // optional uint32 total_stars = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_stars_)));
          set_has_total_stars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_union_name;
        break;
      }

      // optional string union_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_union_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_union_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->union_name().data(), this->union_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_top4_btl_val;
        break;
      }

      // optional uint32 top4_btl_val = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top4_btl_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top4_btl_val_)));
          set_has_top4_btl_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_btl_val;
        break;
      }

      // optional uint32 total_btl_val = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_btl_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_btl_val_)));
          set_has_total_btl_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_rank_player_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nick = 1;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nick(), output);
  }

  // optional uint32 total_stars = 2;
  if (has_total_stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_stars(), output);
  }

  // optional string union_name = 3;
  if (has_union_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->union_name().data(), this->union_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->union_name(), output);
  }

  // optional uint32 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uid(), output);
  }

  // optional uint32 top4_btl_val = 5;
  if (has_top4_btl_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->top4_btl_val(), output);
  }

  // optional uint32 total_btl_val = 6;
  if (has_total_btl_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_btl_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_rank_player_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nick = 1;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nick(), target);
  }

  // optional uint32 total_stars = 2;
  if (has_total_stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_stars(), target);
  }

  // optional string union_name = 3;
  if (has_union_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->union_name().data(), this->union_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->union_name(), target);
  }

  // optional uint32 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uid(), target);
  }

  // optional uint32 top4_btl_val = 5;
  if (has_top4_btl_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->top4_btl_val(), target);
  }

  // optional uint32 total_btl_val = 6;
  if (has_total_btl_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_btl_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_rank_player_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nick = 1;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional uint32 total_stars = 2;
    if (has_total_stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_stars());
    }

    // optional string union_name = 3;
    if (has_union_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->union_name());
    }

    // optional uint32 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 top4_btl_val = 5;
    if (has_top4_btl_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top4_btl_val());
    }

    // optional uint32 total_btl_val = 6;
    if (has_total_btl_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_btl_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_rank_player_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_rank_player_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_rank_player_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_rank_player_t::MergeFrom(const pb_rank_player_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_total_stars()) {
      set_total_stars(from.total_stars());
    }
    if (from.has_union_name()) {
      set_union_name(from.union_name());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_top4_btl_val()) {
      set_top4_btl_val(from.top4_btl_val());
    }
    if (from.has_total_btl_val()) {
      set_total_btl_val(from.total_btl_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_rank_player_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_rank_player_t::CopyFrom(const pb_rank_player_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_rank_player_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pb_rank_player_t::Swap(pb_rank_player_t* other) {
  if (other != this) {
    std::swap(nick_, other->nick_);
    std::swap(total_stars_, other->total_stars_);
    std::swap(union_name_, other->union_name_);
    std::swap(uid_, other->uid_);
    std::swap(top4_btl_val_, other->top4_btl_val_);
    std::swap(total_btl_val_, other->total_btl_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_rank_player_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_rank_player_t_descriptor_;
  metadata.reflection = pb_rank_player_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_rank_player_list_t::kRankPlayersFieldNumber;
const int pb_rank_player_list_t::kSelfRankFieldNumber;
#endif  // !_MSC_VER

pb_rank_player_list_t::pb_rank_player_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_rank_player_list_t::InitAsDefaultInstance() {
}

pb_rank_player_list_t::pb_rank_player_list_t(const pb_rank_player_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_rank_player_list_t::SharedCtor() {
  _cached_size_ = 0;
  self_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_rank_player_list_t::~pb_rank_player_list_t() {
  SharedDtor();
}

void pb_rank_player_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_rank_player_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_rank_player_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_rank_player_list_t_descriptor_;
}

const pb_rank_player_list_t& pb_rank_player_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_rank_player_list_t* pb_rank_player_list_t::default_instance_ = NULL;

pb_rank_player_list_t* pb_rank_player_list_t::New() const {
  return new pb_rank_player_list_t;
}

void pb_rank_player_list_t::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    self_rank_ = 0u;
  }
  rank_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_rank_player_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .commonproto.pb_rank_player_t rank_players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank_players;
        if (input->ExpectTag(16)) goto parse_self_rank;
        break;
      }

      // optional uint32 self_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_rank_)));
          set_has_self_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_rank_player_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .commonproto.pb_rank_player_t rank_players = 1;
  for (int i = 0; i < this->rank_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank_players(i), output);
  }

  // optional uint32 self_rank = 2;
  if (has_self_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_rank_player_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .commonproto.pb_rank_player_t rank_players = 1;
  for (int i = 0; i < this->rank_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank_players(i), target);
  }

  // optional uint32 self_rank = 2;
  if (has_self_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_rank_player_list_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 self_rank = 2;
    if (has_self_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_rank());
    }

  }
  // repeated .commonproto.pb_rank_player_t rank_players = 1;
  total_size += 1 * this->rank_players_size();
  for (int i = 0; i < this->rank_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_rank_player_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_rank_player_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_rank_player_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_rank_player_list_t::MergeFrom(const pb_rank_player_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_players_.MergeFrom(from.rank_players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_self_rank()) {
      set_self_rank(from.self_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_rank_player_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_rank_player_list_t::CopyFrom(const pb_rank_player_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_rank_player_list_t::IsInitialized() const {

  for (int i = 0; i < rank_players_size(); i++) {
    if (!this->rank_players(i).IsInitialized()) return false;
  }
  return true;
}

void pb_rank_player_list_t::Swap(pb_rank_player_list_t* other) {
  if (other != this) {
    rank_players_.Swap(&other->rank_players_);
    std::swap(self_rank_, other->self_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_rank_player_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_rank_player_list_t_descriptor_;
  metadata.reflection = pb_rank_player_list_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_enemies_rank_list_t::kEnemiesRanksFieldNumber;
#endif  // !_MSC_VER

pb_enemies_rank_list_t::pb_enemies_rank_list_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_enemies_rank_list_t::InitAsDefaultInstance() {
}

pb_enemies_rank_list_t::pb_enemies_rank_list_t(const pb_enemies_rank_list_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_enemies_rank_list_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_enemies_rank_list_t::~pb_enemies_rank_list_t() {
  SharedDtor();
}

void pb_enemies_rank_list_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_enemies_rank_list_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_enemies_rank_list_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_enemies_rank_list_t_descriptor_;
}

const pb_enemies_rank_list_t& pb_enemies_rank_list_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

pb_enemies_rank_list_t* pb_enemies_rank_list_t::default_instance_ = NULL;

pb_enemies_rank_list_t* pb_enemies_rank_list_t::New() const {
  return new pb_enemies_rank_list_t;
}

void pb_enemies_rank_list_t::Clear() {
  enemies_ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_enemies_rank_list_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 enemies_ranks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemies_ranks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_enemies_ranks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enemies_ranks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_enemies_ranks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_enemies_rank_list_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 enemies_ranks = 1;
  for (int i = 0; i < this->enemies_ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->enemies_ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_enemies_rank_list_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 enemies_ranks = 1;
  for (int i = 0; i < this->enemies_ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->enemies_ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_enemies_rank_list_t::ByteSize() const {
  int total_size = 0;

  // repeated uint32 enemies_ranks = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemies_ranks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->enemies_ranks(i));
    }
    total_size += 1 * this->enemies_ranks_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_enemies_rank_list_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_enemies_rank_list_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_enemies_rank_list_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_enemies_rank_list_t::MergeFrom(const pb_enemies_rank_list_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemies_ranks_.MergeFrom(from.enemies_ranks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_enemies_rank_list_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_enemies_rank_list_t::CopyFrom(const pb_enemies_rank_list_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_enemies_rank_list_t::IsInitialized() const {

  return true;
}

void pb_enemies_rank_list_t::Swap(pb_enemies_rank_list_t* other) {
  if (other != this) {
    enemies_ranks_.Swap(&other->enemies_ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_enemies_rank_list_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_enemies_rank_list_t_descriptor_;
  metadata.reflection = pb_enemies_rank_list_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commonproto

// @@protoc_insertion_point(global_scope)
